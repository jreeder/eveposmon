<?xml version="1.0"?>
<doc>
    <assembly>
        <name>libeveapi</name>
    </assembly>
    <members>
        <member name="T:libeveapi.SkillTree">
            <summary>
            
            </summary>
        </member>
        <member name="M:libeveapi.ApiResponse.ParseCommonElements(System.Xml.XmlDocument)">
            <summary>
            This parses out all of the elements that are common to each one of the xml files,
            which mainly includes dates, or errors if they exist.
            </summary>
            <param name="xmlDoc"></param>
            <returns></returns>
        </member>
        <member name="P:libeveapi.ApiResponse.HashedUrl">
            <summary>
            This is a hashed version of the url that is sent to CCP to request the file
            </summary>
        </member>
        <member name="P:libeveapi.ApiResponse.CurrentTime">
            <summary>
            This is the current time that CCP sends to us on the file.
            </summary>
        </member>
        <member name="P:libeveapi.ApiResponse.CachedUntil">
            <summary>
            This is the time that the file says it is cacheable till in CCP time.  We use
            the currentTime that is sent along with the file to calculate how long this
            is till.
            </summary>
        </member>
        <member name="P:libeveapi.ApiResponse.CurrentTimeLocal">
            <summary>
            This is the current time on the local machine.
            </summary>
        </member>
        <member name="P:libeveapi.ApiResponse.CachedUntilLocal">
            <summary>
            This is what time the file should be cached to according to the local
            clock.  A timespan is created from the eve time, and added to CurrentTimeLocal
            </summary>
        </member>
        <member name="P:libeveapi.ApiResponse.ResponseXml">
            <summary>
            The raw xml response from the api
            </summary>
        </member>
        <member name="P:libeveapi.ApiResponse.FromCache">
            <summary>
            True if this data came from the cache
            False if this data came directly from the eve api
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.SkillTree.Skills">
=======
        <member name="M:libeveapi.MapJumps.FromXmlDocument(System.Xml.XmlDocument)">
>>>>>>> .r330
            <summary>
<<<<<<< .mine
            
=======
            Create an MapJumps object by parsing an XmlDocument response from the eve api
>>>>>>> .r330
            </summary>
<<<<<<< .mine
=======
            <param name="xmlDoc">An XML document containing jump information</param>
            <returns></returns>
>>>>>>> .r330
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.SkillTree.Skill">
=======
        <member name="P:libeveapi.MapJumps.MapSystemJumps">
>>>>>>> .r330
            <summary>
            Information about a EVE Skill
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.SkillTree.Skill.TypeName">
            <summary>
            Name of the skill
            </summary>
        </member>
=======
>>>>>>> .r330
        <member name="P:libeveapi.SkillTree.Skill.GroupId">
            <summary>
            Unique identifier for the group this skill belongs to
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.SkillTree.Skill.TypeId">
=======
        <member name="P:libeveapi.MapJumps.MapSystemItem.SolarSystemId">
>>>>>>> .r330
            <summary>
            Unique identifier for this skill type
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.SkillTree.Skill.Description">
=======
        <member name="P:libeveapi.MapJumps.MapSystemItem.ShipJumps">
>>>>>>> .r330
            <summary>
            information about the skill
            </summary>
        </member>
        <member name="P:libeveapi.SkillTree.Skill.Rank">
            <summary>
            The training time multiplier of the skill
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.SkillTree.Skill.RequiredSkills">
            <summary>
            The skills required to train this skill
            </summary>
        </member>
=======
>>>>>>> .r330
        <member name="P:libeveapi.SkillTree.Skill.PrimaryAttribute">
            <summary>
            The attrbute that has the most effect on the amount of time required to train this skill.
            </summary>
        </member>
        <member name="P:libeveapi.SkillTree.Skill.SecondaryAttribute">
            <summary>
            The attribute that has the second most effect of the amount of time required to train this skill.
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.SkillTree.Skill.SkillBonuses">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItems">
            <summary>
            
            </summary>
        </member>
        <member name="T:libeveapi.IndustryJobList.IndustryJobListItem">
>>>>>>> .r330
            <summary>
            The bonuses gained from training this skill.
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.SkillTree.RequiredSkill">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.JobId">
>>>>>>> .r330
            <summary>
            A skill required to train the parent skill
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.SkillTree.RequiredSkill.TypeId">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.AssemblyLineId">
>>>>>>> .r330
            <summary>
            The unique identifier of this skill type.
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.SkillTree.RequiredSkill.SkillLevel">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.ContainerId">
>>>>>>> .r330
            <summary>
            This skill level is required to train the parent skill.
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.SkillTree.SkillGroup">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.InstalledItemId">
>>>>>>> .r330
            <summary>
            A group of related skills
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.SkillTree.SkillGroup.GroupName">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.InstalledItemLocationId">
>>>>>>> .r330
            <summary>
            The name of this skill group.
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.SkillTree.SkillGroup.GroupId">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.InstalledItemQuantity">
>>>>>>> .r330
            <summary>
            The unique identifier for this skill group.
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.SkillTree.SkillBonus">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.InstalledItemProductivityLevel">
>>>>>>> .r330
            <summary>
            A bonus gained from training the parent skill
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.SkillTree.SkillBonus.BonusType">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.InstalledItemMaterialLevel">
>>>>>>> .r330
            <summary>
            Description of the bonus
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.SkillTree.SkillBonus.BonusValue">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.InstalledItemLicensedProductionRunsRemaining">
>>>>>>> .r330
            <summary>
            The amount of bonus gained from each level of the skill trained.
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.SkillTree.AttributeType">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.OutputLocationId">
>>>>>>> .r330
            <summary>
            Different types of character attributes
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.SkillTree.AttributeType.Memory">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.InstallerId">
>>>>>>> .r330
            <summary>
            The memory attribute
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.SkillTree.AttributeType.Willpower">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.Runs">
>>>>>>> .r330
            <summary>
            The Willpower attribute
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.SkillTree.AttributeType.Intelligence">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.LicensedProductionRuns">
>>>>>>> .r330
            <summary>
            The Intelligence attribute
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.SkillTree.AttributeType.Perception">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.InstalledInSolarSystemId">
>>>>>>> .r330
            <summary>
            The Perception attribute
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.SkillTree.AttributeType.Charisma">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.ContainerLocationId">
>>>>>>> .r330
            <summary>
            The Charisma attribute
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.SkillTree.AttributeType.Unknown">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.MaterialMultiplier">
>>>>>>> .r330
            <summary>
            What is this attribute?
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.Roles">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.CharMaterialMultiplier">
>>>>>>> .r330
            <summary>
            
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Roles.rolesTable">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.TimeMultiplier">
>>>>>>> .r330
            <summary>
            
            </summary>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.Roles.#ctor(System.String)">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.CharTimeMultiplier">
>>>>>>> .r330
            <summary>
            
            </summary>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.Roles.#ctor(System.UInt64)">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.InstalledItemTypeId">
>>>>>>> .r330
            <summary>
            
            </summary>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.Roles.decodeRoles(System.UInt64)">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.OutputTypeId">
>>>>>>> .r330
            <summary>
            This loops through each role and checks to see if it has been assigned
            </summary>
            <param name="mask"></param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.Roles.HasRole(libeveapi.RoleTypes)">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.ContainerTypeId">
>>>>>>> .r330
            <summary>
            Return true if the specified role is present
            </summary>
            <param name="roleType"></param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.Roles.GetRoleName(libeveapi.RoleTypes)">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.InstalledItemCopy">
>>>>>>> .r330
            <summary>
            Get the name of a role
            </summary>
            <param name="en"></param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.Roles.GetRoleDescription(libeveapi.RoleTypes)">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.Completed">
>>>>>>> .r330
            <summary>
            Get the description of a role
            </summary>
            <param name="en"></param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.Name">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.CompletedSuccessfully">
>>>>>>> .r330
            <summary>
            The name of a role
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.Description">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.InstalledItemFlag">
>>>>>>> .r330
            <summary>
            The description of a role
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.RoleTypes">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.OutputFlag">
>>>>>>> .r330
            <summary>
            Character Roles
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.RoleTypes.Director">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.ActivityId">
>>>>>>> .r330
            <summary>
            
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.RoleTypes.ConfigEquipment">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.Activity">
>>>>>>> .r330
            <summary>
            
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.RoleTypes.ConfigStarbase">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.CompletedStatus">
>>>>>>> .r330
            <summary>
            
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.RoleTypes.JuniorAccountant">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.InstallTime">
>>>>>>> .r330
            <summary>
            
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.RoleTypes.RentFactory">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.BeginProductionTime">
>>>>>>> .r330
            <summary>
            
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.RoleTypes.RentOffice">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.EndProductionTime">
>>>>>>> .r330
            <summary>
            
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.RoleTypes.RentResearchFacility">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.PauseProductionTime">
>>>>>>> .r330
            <summary>
            
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.RoleTypes.PersonnelManager">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.InstallTimeLocal">
>>>>>>> .r330
            <summary>
            
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.RoleTypes.Accountant">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.BeginProductionTimeLocal">
>>>>>>> .r330
            <summary>
            
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.RoleTypes.SecurityManager">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.EndProductionTimeLocal">
>>>>>>> .r330
            <summary>
            
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.RoleTypes.FactoryManager">
=======
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.PauseProductionTimeLocal">
>>>>>>> .r330
            <summary>
            
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.StationManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.Auditor">
            <summary>
            
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.TakeFromDivision1Hangar">
            <summary>
            This allows a person to take from the Division 1 Hanger
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.TakeFromDivision2Hangar">
            <summary>
            This allows a person to take from the Division 2 Hanger
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.TakeFromDivision3Hangar">
            <summary>
            This allows a person to take from the Division 3 Hanger
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.TakeFromDivision4Hangar">
            <summary>
            This allows a person to take from the Division 4 Hanger
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.TakeFromDivision5Hangar">
            <summary>
            This allows a person to take from the Division 5 Hanger
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.TakeFromDivision6Hangar">
            <summary>
            This allows a person to take from the Division 6 Hanger
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.TakeFromDivision7Hangar">
            <summary>
            This allows a person to take from the Division 7 Hanger
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.QueryDivision1Hangar">
            <summary>
            This allows a person to query from the Division 1 Hanger
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.QueryDivision2Hangar">
            <summary>
            This allows a person to query from the Division 2 Hanger
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.QueryDivision3Hangar">
            <summary>
            This allows a person to query from the Division 3 Hanger
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.QueryDivision4Hangar">
            <summary>
            This allows a person to query from the Division 4 Hanger
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.QueryDivision5Hangar">
            <summary>
            This allows a person to query from the Division 5 Hanger
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.QueryDivision6Hangar">
            <summary>
            This allows a person to query from the Division 6 Hanger
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.QueryDivision7Hangar">
            <summary>
            This allows a person to query from the Division 7 Hanger
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.TakeFromDivision1Accounts">
            <summary>
            This allows a person to take ISK from the Division 1 Account
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.TakeFromDivision2Accounts">
            <summary>
            This allows a person to take ISK from the Division 2 Account
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.TakeFromDivision3Accounts">
            <summary>
            This allows a person to take ISK from the Division 3 Account
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.TakeFromDivision4Accounts">
            <summary>
            This allows a person to take ISK from the Division 4 Account
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.TakeFromDivision5Accounts">
            <summary>
            This allows a person to take ISK from the Division 5 Account
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.TakeFromDivision6Accounts">
            <summary>
            This allows a person to take ISK from the Division 6 Account
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.TakeFromDivision7Accounts">
            <summary>
            This allows a person to take ISK from the Division 7 Account
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.QueryDivision1Accounts">
            <summary>
            This allows a person to look at how much ISK is in Division 1 Account
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.QueryDivision2Accounts">
            <summary>
            This allows a person to look at how much ISK is in Division 2 Account
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.QueryDivision3Accounts">
            <summary>
            This allows a person to look at how much ISK is in Division 3 Account
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.QueryDivision4Accounts">
            <summary>
            This allows a person to look at how much ISK is in Division 4 Account
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.QueryDivision5Accounts">
            <summary>
            This allows a person to look at how much ISK is in Division 5 Account
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.QueryDivision6Accounts">
            <summary>
            This allows a person to look at how much ISK is in Division 6 Account
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.QueryDivision7Accounts">
            <summary>
            This allows a person to look at how much ISK is in Division 7 Account
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.ContainerCanTakeDivision1">
            <summary>
            This allows a person to take a container from the Division 1 Hanger
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.ContainerCanTakeDivision2">
            <summary>
            This allows a person to take a container from the Division 2 Hanger
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.ContainerCanTakeDivision3">
            <summary>
            This allows a person to take a container from the Division 3 Hanger
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.ContainerCanTakeDivision4">
            <summary>
            This allows a person to take a container from the Division 4 Hanger
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.ContainerCanTakeDivision5">
            <summary>
            This allows a person to take a container from the Division 5 Hanger
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.ContainerCanTakeDivision6">
            <summary>
            This allows a person to take a container from the Division 6 Hanger
            </summary>
        </member>
        <member name="F:libeveapi.RoleTypes.ContainerCanTakeDivision7">
            <summary>
            This allows a person to take a container from the Division 7 Hanger
            </summary>
        </member>
        <member name="T:libeveapi.MemberTracking">
            <summary>
            Contains information on every member in the corporation. Information retrieved
            varies on your roles without within the corporation. Not valid for NPC corps.
            </summary>
        </member>
        <member name="M:libeveapi.MemberTracking.FromXmlDocument(System.Xml.XmlDocument)">
            <summary>
            Create a MemberTracking object by parsing an XmlDocument response from the eveapi
            </summary>
            <param name="xmlDoc">An XML File containing member tracking data</param>
            <returns></returns>
        </member>
        <member name="P:libeveapi.MemberTracking.Members">
            <summary>
            
            </summary>
        </member>
        <member name="T:libeveapi.MemberTracking.Member">
            <summary>
            Information about an individual member of the corporation.
            </summary>
        </member>
        <member name="P:libeveapi.MemberTracking.Member.CharacterId">
            <summary>
            Unique identifier of the pilot.
            </summary>
        </member>
        <member name="P:libeveapi.MemberTracking.Member.Name">
            <summary>
            Name of the pilot
            </summary>
        </member>
        <member name="P:libeveapi.MemberTracking.Member.StartDateTime">
            <summary>
            Pilot's start date with the corporation
            </summary>
        </member>
        <member name="P:libeveapi.MemberTracking.Member.StartDateTimeLocal">
            <summary>
            Pilot's start date with the corporation in local time
            </summary>
        </member>
        <member name="P:libeveapi.MemberTracking.Member.BaseId">
            <summary>
            The unique identifier of the station the pilot's 
            base station.
            </summary>
        </member>
        <member name="P:libeveapi.MemberTracking.Member.Base">
            <summary>
            The human readable description of the pilot's base 
            station.
            </summary>
        </member>
        <member name="P:libeveapi.MemberTracking.Member.Title">
            <summary>
            Pilot's assigned title in the corporation
            </summary>
        </member>
        <member name="P:libeveapi.MemberTracking.Member.LogonDateTime">
            <summary>
            Timestamp of pilot's last logon
            </summary>
        </member>
        <member name="P:libeveapi.MemberTracking.Member.LogonDateTimeLocal">
            <summary>
            Timestamp of pilot's last logon in local time
            </summary>
        </member>
        <member name="P:libeveapi.MemberTracking.Member.LogoffDateTime">
            <summary>
            Timestamp of pilot's last logoff
            </summary>
        </member>
        <member name="P:libeveapi.MemberTracking.Member.LogoffDateTimeLocal">
            <summary>
            Timestamp of pilot's last logoff in local time
            </summary>
        </member>
        <member name="P:libeveapi.MemberTracking.Member.LocationId">
            <summary>
            The unique id of the system where the pilot is currently located
            </summary>
        </member>
        <member name="P:libeveapi.MemberTracking.Member.Location">
            <summary>
            A human readable description of the current location of the pilot
            </summary>
        </member>
        <member name="P:libeveapi.MemberTracking.Member.ShipTypeId">
            <summary>
            The unique identifier of the ship type the pilot is 
            currently flying
            </summary>
        </member>
        <member name="P:libeveapi.MemberTracking.Member.ShipType">
            <summary>
            The human readable description of the type of ship the 
            pilot is currently flying
            </summary>
        </member>
        <member name="P:libeveapi.MemberTracking.Member.RolesMask">
            <summary>
            A mask describing the pilot's current roles in the corporation
            </summary>
        </member>
        <member name="P:libeveapi.MemberTracking.Member.GrantableRoles">
            <summary>
            Depricated
            </summary>
        </member>
        <member name="P:libeveapi.MemberTracking.Member.Roles">
            <summary>
            This pilot's roles in the corporation
            </summary>
        </member>
        <member name="T:libeveapi.ErrorList">
            <summary>
            
            </summary>
        </member>
        <member name="F:libeveapi.ErrorList.ErrorTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:libeveapi.ErrorList.FromXmlDocument(System.Xml.XmlDocument)">
            <summary>
            Create an ErrorList by parsing an XmlDocument response from the eveapi
            </summary>
            <param name="xmlDoc">An XML Document Containing error list information</param>
            <returns><see cref="T:libeveapi.ErrorList"/></returns>
        </member>
        <member name="M:libeveapi.ErrorList.GetMessageForErrorCode(System.String)">
            <summary>
            Returns the description for the specified error code
            </summary>
            <param name="errorCode"></param>
            <returns></returns>
        </member>
        <member name="T:libeveapi.KillLog">
            <summary>
            Log of 25 most recent kills for a character or 100 most recent for corporation
            </summary>
        </member>
        <member name="M:libeveapi.KillLog.FromXmlDocument(System.Xml.XmlDocument)">
            <summary>
            Creates a KillLog object from the xml api response
            </summary>
            <param name="xmlDoc">XmlDocument Containing the api response</param>
            <returns></returns>
        </member>
        <member name="M:libeveapi.KillLog.ParseItemRow(System.Xml.XmlNode)">
            <summary>
            This function allows you to recursively build the items list. 
            This is needed because the items can be infinitely nested in the killmail
            </summary>
            <param name="ItemNode">The XmlNode containing the item row you want to parse</param>
            <returns>The item with it's child items in it's ContainedItems array</returns>
        </member>
        <member name="P:libeveapi.KillLog.Kills">
            <summary>
            Array containing all the kills returned from the api call 
            </summary>
        </member>
        <member name="T:libeveapi.KillLog.Kill">
            <summary>
            A Kill contains a victim, list of attackers, and items lost
            </summary>
        </member>
        <member name="P:libeveapi.KillLog.Kill.KillId">
            <summary>
            Unique kill ID for this kill. This is to be used as the input for 
            beforeKillID if you need to scroll back. This is globally unique 
            and can be used for uniquely identifying a kill to other killboards.
            </summary>
        </member>
        <member name="P:libeveapi.KillLog.Kill.SolarSystemId">
            <summary>
            The ID of the solar system this kill occurred in.
            </summary>
        </member>
        <member name="P:libeveapi.KillLog.Kill.KillTime">
            <summary>
            What time the event occurred.
            </summary>
        </member>
        <member name="P:libeveapi.KillLog.Kill.KillTimeLocal">
            <summary>
            What time the event occurred in local time.
            </summary>
        </member>
        <member name="P:libeveapi.KillLog.Kill.MoonId">
            <summary>
            In some situations, this is present to define what moon a 
            kill occurred at. Note that this is generally only present 
            in situations where the loss is a POS structure. It is not
            guaranteed to be populated.
            </summary>
        </member>
        <member name="P:libeveapi.KillLog.Kill.Victim">
            <summary>
            The victim of the attack
            </summary>
        </member>
        <member name="P:libeveapi.KillLog.Kill.Attackers">
            <summary>
            The attacking pilots
            </summary>
        </member>
        <member name="P:libeveapi.KillLog.Kill.Items">
            <summary>
            The items lost / dropped in the attack
            </summary>
        </member>
        <member name="T:libeveapi.KillLog.Pilot">
            <summary>
            A pilot base class
            </summary>
        </member>
        <member name="P:libeveapi.KillLog.Pilot.CharacterId">
            <summary>
            Character's ID. Fairly self-explanatory. Can be 0 in which 
            case this kill was not done by a character and instead 
            was done by a corporation. In the victim case, this implies 
            it is a structure loss.
            </summary>
        </member>
        <member name="P:libeveapi.KillLog.Pilot.CharacterName">
            <summary>
            If present, the name of the above characterID.
            </summary>
        </member>
        <member name="P:libeveapi.KillLog.Pilot.CorporationId">
            <summary>
            The ID of the corporation. This will always be present, 
            as there is always a corporation behind the victim, 
            whether it is the corporation itself or simply someone 
            in that corporation.
            </summary>
        </member>
        <member name="P:libeveapi.KillLog.Pilot.CorporationName">
            <summary>
            The name of the corporation associated with the kill.
            </summary>
        </member>
        <member name="P:libeveapi.KillLog.Pilot.AllianceId">
            <summary>
            If not 0, this is the ID of the alliance the corporation belongs to.
            </summary>
        </member>
        <member name="P:libeveapi.KillLog.Pilot.AllianceName">
            <summary>
            The name of the alliance associated with the kill.
            </summary>
        </member>
        <member name="P:libeveapi.KillLog.Pilot.ShipTypeId">
            <summary>
            The item lost. This could be a ship as suggested by the name 
            but can potentially be anything that generates a kill event.
            </summary>
        </member>
        <member name="T:libeveapi.KillLog.VictimPilot">
            <summary>
            The victim pilot
            </summary>
        </member>
        <member name="P:libeveapi.KillLog.VictimPilot.DamageTaken">
            <summary>
            How much damage the victim took before 
            succumbing to fiery defeat and humiliation.
            Please note that this damage is calculated after resists. 
            It does give you a decent idea of how much 
            they were tanking, however.
            </summary>
        </member>
        <member name="T:libeveapi.KillLog.Attacker">
            <summary>
            An Attacking pilot
            </summary>
        </member>
        <member name="P:libeveapi.KillLog.Attacker.SecurityStatus">
            <summary>
            The security status of the aggressor at the time of this kill.
            </summary>
        </member>
        <member name="P:libeveapi.KillLog.Attacker.DamageDone">
            <summary>
            The amount of damage done to the victim. This is post-resists damage done.
            </summary>
        </member>
        <member name="P:libeveapi.KillLog.Attacker.FinalBlow">
            <summary>
            Whether or not this aggressor is attributed with the so-called "final blow."
            </summary>
        </member>
        <member name="P:libeveapi.KillLog.Attacker.WeaponTypeId">
            <summary>
            What weapon we decided to show this person as using. Often a weapon, 
            sometimes a ship or missile, rarely a fish
            </summary>
        </member>
        <member name="T:libeveapi.KillLog.Item">
            <summary>
            An Item from the killmail
            </summary>
        </member>
        <member name="P:libeveapi.KillLog.Item.TypeId">
            <summary>
            The typeID of this item, references the invTypes table
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.KillLog.Item.Flag">
            <summary>
            See <see cref="T:libeveapi.InventoryFlagType"/> for full details.
            </summary>
        </member>
=======
>>>>>>> .r330
        <member name="P:libeveapi.KillLog.Item.QtyDropped">
            <summary>
            How many of this item were dropped. 
            If the user had multiple stacks, we compress the total number of 
            dropped items to just one stack for space purposes
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.KillLog.Item.QtyDestroyed">
=======
        <member name="P:libeveapi.CharacterIdName.CharacterIdItems">
            <summary>
            The character name and character id that are associated with eachother
            </summary>
        </member>
        <member name="T:libeveapi.CharacterIdName.CharacterIdNameItem">
>>>>>>> .r330
            <summary>
            How many of this item fell victim to atomic
            dispersal and other sad little ends that such 
            things can meet.
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.KillLog.Item.Container">
=======
        <member name="P:libeveapi.CharacterIdName.CharacterIdNameItem.Name">
>>>>>>> .r330
            <summary>
            True if the destroyed item contained other items.
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.KillLog.Item.ContainedItems">
=======
        <member name="P:libeveapi.CharacterIdName.CharacterIdNameItem.CharacterId">
>>>>>>> .r330
            <summary>
            List of contained items.
            </summary>
        </member>
        <member name="T:libeveapi.KillLogType">
            <summary>
            Enum choice for Kill Log type
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.KillLogType.Corporation">
            <summary>
            Corporation Kill Log
            </summary>
        </member>
=======
>>>>>>> .r330
        <member name="F:libeveapi.KillLogType.Character">
            <summary>
            Character Kill Log
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.SkillInTraining">
=======
        <member name="P:libeveapi.AccountBalance.AccountBalanceItems">
            <summary>
            The accounts associated with this character or corporation
            </summary>
        </member>
        <member name="T:libeveapi.AccountBalance.AccountBalanceItem">
>>>>>>> .r330
            <summary>
            Contains the Current Skill in Training
            </summary>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.SkillInTraining.FromXmlDocument(System.Xml.XmlDocument)">
=======
        <member name="P:libeveapi.AccountBalance.AccountBalanceItem.AccountId">
>>>>>>> .r330
            <summary>
            Create a SkillIntTraining Object by parsing an XmlDocument
            response for the eveapi
            </summary>
            <param name="xmlDoc">XmlDocument containing the skill in training xml</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.SkillInTraining.SkillCurrentlyInTraining">
=======
        <member name="P:libeveapi.AccountBalance.AccountBalanceItem.AccountKey">
>>>>>>> .r330
            <summary>
            True if a skill is currently training, false is no skill is training
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.SkillInTraining.TrainingEndTime">
            
=======
        <member name="P:libeveapi.AccountBalance.AccountBalanceItem.Balance">
>>>>>>> .r330
            <summary>
            Server time when skill training completes in ccp time
            Minvalue - when no skill training
            </summary>
        </member>
        <member name="P:libeveapi.SkillInTraining.TrainingStartTime">
            
            <summary>
            Server time when skill training started in ccp time
            Minvalue - when no skill training
            </summary>
        </member>
        <member name="P:libeveapi.SkillInTraining.TrainingEndTimeLocal">
            
            <summary>
            Server time when skill training completes in local time
            Minvalue - when no skill training
            </summary>
        </member>
        <member name="P:libeveapi.SkillInTraining.TrainingStartTimeLocal">
            
            <summary>
            Server time when skill training started in local time
            Minvalue - when no skill training
            </summary>
        </member>
        <member name="P:libeveapi.SkillInTraining.TrainingTypeId">
            
            <summary>
            Id of skill in training
            0 - when no skill training
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.SkillInTraining.TrainingStartSP">
            
            <summary>
            Skill Points at training start
            0 - when no skill training
            </summary>
        </member>
        <member name="P:libeveapi.SkillInTraining.TrainingDestinationSP">
            
            <summary>
            Skill Points after training end
            0 - when no skill training
            </summary>
        </member>
=======
>>>>>>> .r330
        <member name="P:libeveapi.SkillInTraining.TrainingToLevel">
            
            <summary>
            Skill level being trained
            0 - when no skill training
            </summary>
        </member>
        <member name="T:libeveapi.CorporationSheet">
            <summary>
            Detailed information about a corporation
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.CorporationSheet.CorporationId">
=======
        <member name="P:libeveapi.MarketOrders.MarketOrderItems">
            <summary>
            
            </summary>
        </member>
        <member name="T:libeveapi.MarketOrders.MarketOrderItem">
>>>>>>> .r330
            <summary>
            Unique identifier for the corporation
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.CorporationSheet.CorporationName">
=======
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.OrderType">
>>>>>>> .r330
            <summary>
            Name of the corporation
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.CorporationSheet.Ticker">
=======
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.OrderId">
>>>>>>> .r330
            <summary>
            Stock ticker symbol for the corporation
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.CorporationSheet.CeoId">
=======
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.CharId">
>>>>>>> .r330
            <summary>
            The characterId of the character that is CEO of the corporation
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.CorporationSheet.CeoName">
=======
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.StationId">
>>>>>>> .r330
            <summary>
            The name of the character that is CEO of the corporation
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.CorporationSheet.StationId">
=======
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.VolEntered">
>>>>>>> .r330
            <summary>
            The unique id of the station where the corporation is based
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.CorporationSheet.StationName">
=======
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.VolRemaining">
>>>>>>> .r330
            <summary>
            The name of the station where the corporation is based
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.CorporationSheet.Description">
=======
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.MinVolume">
>>>>>>> .r330
            <summary>
            A description of the corporation as set by the corporation
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.CorporationSheet.Url">
=======
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.OrderState">
>>>>>>> .r330
            <summary>
            A url to the corporation's web site
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.CorporationSheet.AllianceId">
=======
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.TypeId">
>>>>>>> .r330
            <summary>
             	 The unique identifier of this corporation's alliance
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.CorporationSheet.AllianceName">
=======
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.Range">
>>>>>>> .r330
            <summary>
            The name of this corporation's alliance
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.CorporationSheet.TaxRate">
=======
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.AccountKey">
>>>>>>> .r330
            <summary>
            The tax rate of the corporation
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.CorporationSheet.MemberCount">
=======
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.Duration">
>>>>>>> .r330
            <summary>
            The current number of pilots in the corporation
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.CorporationSheet.MemberLimit">
=======
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.Escrow">
>>>>>>> .r330
            <summary>
            The current maximum number of pilots the corporation can contain
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.CorporationSheet.Shares">
=======
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.Price">
>>>>>>> .r330
            <summary>
            The current number of outstanding shares of the corporation
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.CorporationSheet.Divisions">
=======
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.Bid">
>>>>>>> .r330
            <summary>
            
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.CorporationSheet.WalletDivisions">
=======
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.Issued">
>>>>>>> .r330
            <summary>
            
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.CorporationSheet.Logo">
=======
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.IssuedLocal">
>>>>>>> .r330
            <summary>
            An object describing the corporation logo
            </summary>
        </member>
        <member name="T:libeveapi.CorporationSheet.Division">
            <summary>
            Information about a corporate division
            </summary>
        </member>
        <member name="P:libeveapi.CorporationSheet.Division.AccountKey">
            <summary>
            The account key used to access the corporate division
            </summary>
        </member>
        <member name="P:libeveapi.CorporationSheet.Division.Description">
            <summary>
            The name of hte division
            </summary>
        </member>
        <member name="T:libeveapi.CorporationSheet.WalletDivision">
            <summary>
            The different corporation wallet divisions
            </summary>
        </member>
        <member name="P:libeveapi.CorporationSheet.WalletDivision.AccountKey">
            <summary>
            The account key used to access this division
            </summary>
        </member>
        <member name="P:libeveapi.CorporationSheet.WalletDivision.Description">
            <summary>
            The name given to the wallet
            </summary>
        </member>
        <member name="T:libeveapi.CorporationSheet.CorpLogo">
            <summary>
            
            </summary>
        </member>
        <member name="P:libeveapi.CorporationSheet.CorpLogo.GraphicId">
            <summary>
            
            </summary>
        </member>
        <member name="P:libeveapi.CorporationSheet.CorpLogo.Shape1">
            <summary>
            
            </summary>
        </member>
        <member name="P:libeveapi.CorporationSheet.CorpLogo.Shape2">
            <summary>
            
            </summary>
        </member>
        <member name="P:libeveapi.CorporationSheet.CorpLogo.Shape3">
            <summary>
            
            </summary>
        </member>
        <member name="P:libeveapi.CorporationSheet.CorpLogo.Color1">
            <summary>
            
            </summary>
        </member>
        <member name="P:libeveapi.CorporationSheet.CorpLogo.Color2">
            <summary>
            
            </summary>
        </member>
        <member name="P:libeveapi.CorporationSheet.CorpLogo.Color3">
            <summary>
            
            </summary>
        </member>
        <member name="P:libeveapi.AllianceList.AllianceListItems">
            <summary>
            List of alliances
            </summary>
        </member>
        <member name="T:libeveapi.AllianceList.AllianceListItem">
            <summary>
            Represents an alliance
            </summary>
        </member>
        <member name="P:libeveapi.AllianceList.AllianceListItem.Name">
            <summary>
            full name of the alliance
            </summary>
        </member>
        <member name="P:libeveapi.AllianceList.AllianceListItem.ShortName">
            <summary>
            ticker name of the alliance
            </summary>
        </member>
        <member name="P:libeveapi.AllianceList.AllianceListItem.AllianceId">
            <summary>
            unique identifier for this alliance
            </summary>
        </member>
        <member name="P:libeveapi.AllianceList.AllianceListItem.ExecutorCorpId">
            <summary>
            unique identifier of executor corporation
            </summary>
        </member>
        <member name="P:libeveapi.AllianceList.AllianceListItem.MemberCount">
            <summary>
            Current number of pilots in the alliance
            </summary>
        </member>
        <member name="P:libeveapi.AllianceList.AllianceListItem.StartDate">
            <summary>
            Date the alliance was created in CCP time
            </summary>
        </member>
        <member name="P:libeveapi.AllianceList.AllianceListItem.StartDateLocal">
            <summary>
            Date the alliance was created in local time
            </summary>
        </member>
        <member name="P:libeveapi.AllianceList.AllianceListItem.CorporationListItems">
            <summary>
            List of member corporations
            </summary>
        </member>
        <member name="T:libeveapi.AllianceList.CorporationListItem">
            <summary>
            Represents a member corporation
            </summary>
        </member>
        <member name="P:libeveapi.AllianceList.CorporationListItem.CorporationId">
            <summary>
            unique identifier for the corporation
            </summary>
        </member>
        <member name="P:libeveapi.AllianceList.CorporationListItem.StartDate">
            <summary>
            date the corporation joined the alliance in CCP time
            </summary>
        </member>
        <member name="P:libeveapi.AllianceList.CorporationListItem.StartDateLocal">
            <summary>
            date the corporation joined the alliance in local time
            </summary>
        </member>
        <member name="T:libeveapi.RefTypes">
            <summary>
            This represents the different refence types used in the journal entries
            </summary>
        </member>
        <member name="F:libeveapi.RefTypes.ReferenceTypes">
            <summary>
            A reference type is made up of an int, which is the referenceId, and then a string
            which is the name of the reference.  They are stored in a serializable dictionary
            for easy searching and saving.
            </summary>
        </member>
        <member name="M:libeveapi.RefTypes.FromXmlDocument(System.Xml.XmlDocument)">
            <summary>
            Create an ErrorList by parsing an XmlDocument response from the eveapi
            </summary>
            <param name="xmlDoc"></param>
            <returns></returns>
        </member>
        <member name="M:libeveapi.RefTypes.GetReferenceTypeNameForId(System.Int32)">
            <summary>
            Returns the description for the specified reference type id
            </summary>
            <param name="referenceTypeId"></param>
            <returns></returns>
        </member>
        <member name="T:libeveapi.ResponseCache">
            <summary>
            The response cache is responsible for holding all of the responses when they are
            retrieved from the server, and then caching then, and serving them out instead
            of requesting a new reponse from the server, while the item is supposed to be
            cached.
            </summary>
        </member>
        <member name="M:libeveapi.ResponseCache.Set(System.String,libeveapi.ApiResponse)">
            <summary>
            Store an ApiResponse in the cache
            </summary>
            <param name="url"></param>
            <param name="apiResponse"></param>
        </member>
        <member name="M:libeveapi.ResponseCache.Get(System.String)">
            <summary>
            Get an ApiResponse from the cache
            </summary>
            <param name="url"></param>
            <returns>ApiResponse if cached ApiResponse is valid, null if it is expired</returns>
        </member>
        <member name="M:libeveapi.ResponseCache.Get(System.String,System.Boolean)">
            <summary>
            Get an ApiResponse from the cache
            </summary>
            <param name="url"></param>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns>ApiResponse if cached ApiResponse is valid, null if it is expired</returns>
        </member>
        <member name="M:libeveapi.ResponseCache.Clear">
            <summary>
            Remove all saved items from the cache
            </summary>
        </member>
        <member name="M:libeveapi.ResponseCache.Save(System.String)">
            <summary>
            Save all currently cached items to the specified file
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:libeveapi.ResponseCache.Save(System.IO.Stream)">
            <summary>
            Serialize the ResposeCache to a stream
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:libeveapi.ResponseCache.Load(System.String)">
            <summary>
            Load cached items from the specified file
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:libeveapi.ResponseCache.Load(System.IO.Stream)">
            <summary>
            Load the ResponseCache from a stream
            </summary>
            <param name="s"></param>
        </member>
        <member name="T:libeveapi.StarbaseDetail">
            <summary>
            Shows the settings and fuel status of a starbase
            </summary>
        </member>
        <member name="M:libeveapi.StarbaseDetail.FromXmlDocument(System.Xml.XmlDocument)">
            <summary>
            Create a StarbaseDetail by parsing an XmlDocument response from the eveapi
            </summary>
            <param name="xmlDoc"></param>
            <returns></returns>
        </member>
        <member name="P:libeveapi.StarbaseDetail.UsageFlags">
            <summary>
            
            </summary>
        </member>
        <member name="P:libeveapi.StarbaseDetail.DeployFlags">
            <summary>
            
            </summary>
        </member>
        <member name="P:libeveapi.StarbaseDetail.AllowCorporationMembers">
            <summary>
            Allow corporation members inside the force field
            </summary>
        </member>
        <member name="P:libeveapi.StarbaseDetail.AllowAllianceMembers">
            <summary>
            Allow alliance members inside the force field
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:libeveapi.StarbaseDetail.ClaimSovereignty" -->
        <member name="P:libeveapi.StarbaseDetail.OnStandingDropEnabled">
            <summary>
            Shoot on standing drop
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.StarbaseDetail.OnStandingDropStanding">
            <summary>
            What target standing makes them a valid target
            </summary>
        </member>
=======
>>>>>>> .r330
        <member name="P:libeveapi.StarbaseDetail.OnStatusDropEnabled">
            <summary>
            Shoot on status drop
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.StarbaseDetail.OnStatusDropStanding">
=======
        <member name="P:libeveapi.MapSovereignty.MapSystemSovereigntyItems">
            <summary>
            
            </summary>
        </member>
        <member name="T:libeveapi.MapSovereignty.MapSovereigntyItem">
>>>>>>> .r330
            <summary>
            What target security make them a valid target
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.StarbaseDetail.OnAgressionEnabled">
=======
        <member name="P:libeveapi.MapSovereignty.MapSovereigntyItem.SolarSystemId">
>>>>>>> .r330
            <summary>
            Shoot on target agression
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.StarbaseDetail.OnCorporationWarEnabled">
=======
        <member name="P:libeveapi.MapSovereignty.MapSovereigntyItem.AllianceId">
>>>>>>> .r330
            <summary>
            Shoot if at war with target
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.StarbaseDetail.FuelList">
=======
        <!-- Badly formed XML comment ignored for member "P:libeveapi.MapSovereignty.MapSovereigntyItem.ConstellationSovereignty" -->
        <member name="P:libeveapi.MapSovereignty.MapSovereigntyItem.SovereigntyLevel">
>>>>>>> .r330
            <summary>
            
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.StarbaseDetail.FuelListItem">
=======
        <member name="P:libeveapi.MapSovereignty.MapSovereigntyItem.FactionId">
>>>>>>> .r330
            <summary>
            Represents a type of fuel present in the starbase
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.StarbaseDetail.FuelListItem.TypeId">
=======
        <member name="P:libeveapi.MapSovereignty.MapSovereigntyItem.SolarSystemName">
>>>>>>> .r330
            <summary>
            Type Id of the fuel
            </summary>
        </member>
        <member name="P:libeveapi.StarbaseDetail.FuelListItem.Quantity">
            <summary>
            Number of units of the fuel remaining
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.IndustryJobList">
            <summary>
            Represents a industry jobs that have been performed and are currently in progress response from the eve api
            http://wiki.eve-dev.net/APIv2_Char_IndustryJobs_XML
            </summary>
        </member>
=======
>>>>>>> .r330
        <member name="M:libeveapi.IndustryJobList.FromXmlDocument(System.Xml.XmlDocument)">
            <summary>
            Create an IndustryJobList by parsing an XmlDocument response from the eveapi
            </summary>
            <param name="xmlDoc">An XML File containing the science and industry job list</param>
            <returns><see cref="T:libeveapi.IndustryJobList"/></returns>
        </member>
        <member name="M:libeveapi.IndustryJobList.ParseIndustryJobRow(System.Xml.XmlNode,libeveapi.IndustryJobList)">
            <summary>
            Create an IndustryJobListItem by parsing a single row
            </summary>
            <param name="industryJobRow">An xml row containing an industry job</param>
            <param name="industryJobList"></param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItems">
=======
        <member name="P:libeveapi.StarbaseList.StarbaseListItems">
            <summary>
            List of all the starbases owned by this corporation
            </summary>
        </member>
        <member name="T:libeveapi.StarbaseList.StarbaseListItem">
>>>>>>> .r330
            <summary>
            
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.IndustryJobList.IndustryJobListItem">
=======
        <member name="P:libeveapi.StarbaseList.StarbaseListItem.ItemId">
>>>>>>> .r330
            <summary>
            A representation of an industry job
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.JobId">
=======
        <member name="P:libeveapi.StarbaseList.StarbaseListItem.TypeId">
>>>>>>> .r330
            <summary>
            This is the unique job id that is assigned 
            to the job by the eve system
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.AssemblyLineId">
=======
        <member name="P:libeveapi.StarbaseList.StarbaseListItem.LocationId">
>>>>>>> .r330
            <summary>
            This is the assembly line that it is installed into if in a station
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.ContainerId">
=======
        <member name="P:libeveapi.StarbaseList.StarbaseListItem.MoonId">
>>>>>>> .r330
            <summary>
            
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.InstalledItemId">
=======
        <member name="P:libeveapi.StarbaseList.StarbaseListItem.State">
>>>>>>> .r330
            <summary>
            This is the itemId of the item that was
            installed for whatever factory job was happening, this
            isnt really useful as it can change, but it will link back
            to something in your asset list (hopefully)
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.InstalledItemLocationId">
=======
        <member name="P:libeveapi.StarbaseList.StarbaseListItem.StateTimestamp">
>>>>>>> .r330
            <summary>
            This is the locationId of where the item was installed
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.InstalledItemQuantity">
=======
        <member name="P:libeveapi.StarbaseList.StarbaseListItem.OnlineTimestamp">
>>>>>>> .r330
            <summary>
            This is how many of the item were installed, (usually 1)
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.InstalledItemProductivityLevel">
=======
        <member name="P:libeveapi.StarbaseList.StarbaseListItem.StateTimestampLocal">
>>>>>>> .r330
            <summary>
            This is the blueprints Productivity Level (TE)
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.InstalledItemMaterialLevel">
=======
        <member name="P:libeveapi.StarbaseList.StarbaseListItem.OnlineTimestampLocal">
>>>>>>> .r330
            <summary>
            This is the blueprints Material Level (ME)
            </summary>
        </member>
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.InstalledItemLicensedProductionRunsRemaining">
            <summary>
            This is how many production runs are left on the
            blueprint that was installed.  A -1 represents a BPO
            with unlimited copies left.
            </summary>
        </member>
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.OutputLocationId">
            <summary>
            This is where the output of the job will be placed
            </summary>
        </member>
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.InstallerId">
            <summary>
            The characterId of the person who installed the job
            </summary>
        </member>
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.Runs">
            <summary>
            This is how many runs of the object are being made.
            </summary>
        </member>
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.LicensedProductionRuns">
            <summary>
            
            </summary>
        </member>
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.InstalledInSolarSystemId">
            <summary>
            This is the solarsystemId of where the job was installed
            </summary>
        </member>
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.ContainerLocationId">
            <summary>
            Where the container is located at, usually a moon or station.
            </summary>
        </member>
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.MaterialMultiplier">
            <summary>
            This is the ME multiplier from the installation place.
            </summary>
        </member>
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.CharMaterialMultiplier">
            <summary>
            This is the ME multiplier that id done by the character's skills
            </summary>
        </member>
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.TimeMultiplier">
            <summary>
            This is the TE multiplier of the station
            </summary>
        </member>
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.CharTimeMultiplier">
            <summary>
            The TE multiplier that id done by the character's skills
            </summary>
        </member>
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.InstalledItemTypeId">
            <summary>
            This is the typeId of the item that was installed (a blueprint)
            </summary>
        </member>
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.OutputTypeId">
            <summary>
            This is the typeId of what will be outputted when the item
            is finished doing whatever it is doing.  For research this will
            be the blueprint itself, for manufacturing this will be the item
            </summary>
        </member>
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.ContainerTypeId">
            <summary>
            This is the lab the items are currently in
            Can be looked up like any typeId, usually a mobile lab 
            or something similar
            </summary>
        </member>
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.InstalledItemCopy">
            <summary>
            This is a bool value if the blueprint installed is a copy or not
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.Completed">
            <summary>
            This is a boolean value if the item has completed or not
            </summary>
        </member>
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.CompletedSuccessfully">
            <summary>
            Boolean value if the job completed successfully or not
            </summary>
        </member>
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.InstalledItemFlag">
            <summary>
            Flags, same as used in the assets
            </summary>
        </member>
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.OutputFlag">
            <summary>
            Flags, same as used in the assets
            </summary>
        </member>
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.ActivityId">
            <summary>
            This is what kind of activity was going on with the item
            (use enum Activities)
            </summary>
        </member>
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.Activity">
            <summary>
            ENUM of what activity is currently being done
            </summary>
        </member>
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.CompletedStatus">
            <summary>
            Status of the item when it was completed
            </summary>
        </member>
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.InstallTime">
            <summary>
            When this item was installed in ccp time
            </summary>
        </member>
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.BeginProductionTime">
            <summary>
            When production time started in ccp time (different than install time if a queue)
            </summary>
        </member>
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.EndProductionTime">
            <summary>
            When the job will be finished in ccp time.
            </summary>
        </member>
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.PauseProductionTime">
            <summary>
            
            </summary>
        </member>
=======
>>>>>>> .r330
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.InstallTimeLocal">
            <summary>
            When this item was installed in local time.
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.BeginProductionTimeLocal">
=======
        <member name="P:libeveapi.MemberTracking.Members">
            <summary>
            
            </summary>
        </member>
        <member name="T:libeveapi.MemberTracking.Member">
>>>>>>> .r330
            <summary>
            When production time started in local time (different than install time if a queue)
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.EndProductionTimeLocal">
=======
        <member name="P:libeveapi.MemberTracking.Member.CharacterId">
>>>>>>> .r330
            <summary>
            When the job will be finished in local time.
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.IndustryJobList.IndustryJobListItem.PauseProductionTimeLocal">
=======
        <member name="P:libeveapi.MemberTracking.Member.Name">
>>>>>>> .r330
            <summary>
            
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.IndustryJobListType">
=======
        <member name="P:libeveapi.MemberTracking.Member.StartDateTime">
>>>>>>> .r330
            <summary>
            Is this a corporation or character type of job
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.IndustryJobListType.Corporation">
=======
        <member name="P:libeveapi.MemberTracking.Member.StartDateTimeLocal">
>>>>>>> .r330
            <summary>
            This is a job for the Corporation
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.IndustryJobListType.Character">
=======
        <member name="P:libeveapi.MemberTracking.Member.BaseId">
>>>>>>> .r330
            <summary>
            This is a personal job for the Character
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.IndustryJobCompletedStatuses">
=======
        <member name="P:libeveapi.MemberTracking.Member.Base">
>>>>>>> .r330
            <summary>
            This represents the status of a job once completed
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.IndustryJobCompletedStatuses.Failed">
=======
        <member name="P:libeveapi.MemberTracking.Member.Title">
>>>>>>> .r330
            <summary>
            It was completed; however, the job failed (invention)
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.IndustryJobCompletedStatuses.Delivered">
=======
        <member name="P:libeveapi.MemberTracking.Member.LogonDateTime">
>>>>>>> .r330
            <summary>
            The job was completed and delivered successfully
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.IndustryJobCompletedStatuses.Aborted">
=======
        <member name="P:libeveapi.MemberTracking.Member.LogonDateTimeLocal">
>>>>>>> .r330
            <summary>
            The job was completed, because it was aborted
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.IndustryJobCompletedStatuses.GM_Aborted">
=======
        <member name="P:libeveapi.MemberTracking.Member.LogoffDateTime">
>>>>>>> .r330
            <summary>
            A GM Completed/Aborted the job
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.IndustryJobCompletedStatuses.Unachored">
=======
        <member name="P:libeveapi.MemberTracking.Member.LogoffDateTimeLocal">
>>>>>>> .r330
            <summary>
            The job was completed because the item it was in was unanchored
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.IndustryJobCompletedStatuses.Destroyed">
=======
        <member name="P:libeveapi.MemberTracking.Member.LocationId">
>>>>>>> .r330
            <summary>
            The job is considered completed because the item was destroyed (mobile lab, etc).
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.Activities">
=======
        <member name="P:libeveapi.MemberTracking.Member.Location">
>>>>>>> .r330
            <summary>
            The different activities that can occur for an Science and Industry job
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Activities.Manufacturing">
=======
        <member name="P:libeveapi.MemberTracking.Member.ShipTypeId">
>>>>>>> .r330
            <summary>
            Manufacturing
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Activities.TechnologyResearch">
=======
        <member name="P:libeveapi.MemberTracking.Member.ShipType">
>>>>>>> .r330
            <summary>
            Researching Technology (not in game at current)
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Activities.TimeEfficiency">
=======
        <member name="P:libeveapi.MemberTracking.Member.RolesMask">
>>>>>>> .r330
            <summary>
            Time Efficiency Research
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Activities.MaterialEfficiency">
=======
        <member name="P:libeveapi.MemberTracking.Member.GrantableRoles">
>>>>>>> .r330
            <summary>
            Material Efficiency Research
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Activities.Copying">
            <summary>
            Blueprint Copying
            </summary>
        </member>
=======
>>>>>>> .r330
        <member name="F:libeveapi.Activities.Duplicating">
            <summary>
            Blueprint Duplication (not in gate at current)
            </summary>
        </member>
        <member name="F:libeveapi.Activities.ReverseEngineering">
            <summary>
            Reverse Engineering (not in game at current)
            </summary>
        </member>
        <member name="F:libeveapi.Activities.Invention">
            <summary>
            Blueprint Invention
            </summary>
        </member>
        <member name="F:libeveapi.Activities.Unknown">
            <summary>
            Unknown type of job
            </summary>
        </member>
        <member name="T:libeveapi.MapKills">
            <summary>
            Represents the number of kills per system from the eve api
            http://wiki.eve-dev.net/APIv2_Map_Kills_XML
            </summary>
        </member>
        <member name="M:libeveapi.MapKills.FromXmlDocument(System.Xml.XmlDocument)">
            <summary>
            Create an Mapkills object by parsing an XmlDocument response from the eve api
            </summary>
            <param name="xmlDoc">An XML Document containing kill information on the map</param>
            <returns><see cref="T:libeveapi.MapKills"/></returns>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MapKills.MapSystemKills">
=======
        <member name="M:libeveapi.SkillInTraining.FromXmlDocument(System.Xml.XmlDocument)">
>>>>>>> .r330
            <summary>
<<<<<<< .mine
            
=======
            Create a SkillIntTraining Object by parsing an XmlDocument
            response for the eveapi
            </summary>
            <param name="xmlDoc">XmlDocument containing the skill in training xml</param>
            <returns></returns>
        </member>
        <member name="P:libeveapi.SkillInTraining.SkillCurrentlyInTraining">
            <summary>
            True if a skill is currently training, false is no skill is training
>>>>>>> .r330
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.MapKills.MapKillsItem">
=======
        <member name="P:libeveapi.SkillInTraining.TrainingEndTime">
            
>>>>>>> .r330
            <summary>
            The information for a system with one jump or more
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MapKills.MapKillsItem.SolarSystemId">
=======
        <member name="P:libeveapi.SkillInTraining.TrainingStartTime">
            
>>>>>>> .r330
            <summary>
            The Id of the solarsystem
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MapKills.MapKillsItem.ShipKills">
=======
        <member name="P:libeveapi.SkillInTraining.TrainingEndTimeLocal">
            
>>>>>>> .r330
            <summary>
            The number of kills
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MapKills.MapKillsItem.FactionKills">
=======
        <member name="P:libeveapi.SkillInTraining.TrainingStartTimeLocal">
            
>>>>>>> .r330
            <summary>
            The number of kills
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MapKills.MapKillsItem.PodKills">
=======
        <member name="P:libeveapi.SkillInTraining.TrainingTypeId">
            
>>>>>>> .r330
            <summary>
            The number of kills
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.CharacterList">
=======
        <member name="P:libeveapi.SkillInTraining.TrainingStartSP">
            
>>>>>>> .r330
            <summary>
            A list of characters on the account
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.CharacterList.CharacterListItems">
=======
        <member name="P:libeveapi.SkillInTraining.TrainingDestinationSP">
            
>>>>>>> .r330
            <summary>
            List of characters associated with an account
            </summary>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.CharacterList.FromXmlDocument(System.Xml.XmlDocument)">
=======
        <member name="P:libeveapi.SkillInTraining.TrainingToLevel">
            
>>>>>>> .r330
            <summary>
            Create a CharacterList by parsing an XmlDocument response from the eveapi
            </summary>
            <param name="xmlDoc">An XML Document containing information about the Character List</param>
            <returns><see cref="T:libeveapi.CharacterList"/></returns>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.CharacterList.CharacterListItem">
            <summary>
            Represents a character from the account character list
            </summary>
        </member>
        <member name="P:libeveapi.CharacterList.CharacterListItem.Name">
            <summary>
            Name of the character
            </summary>
        </member>
        <member name="P:libeveapi.CharacterList.CharacterListItem.CharacterId">
            <summary>
            Id of the character
            </summary>
        </member>
        <member name="P:libeveapi.CharacterList.CharacterListItem.CorporationName">
            <summary>
            Name of the corporation the character is a member of
            </summary>
        </member>
        <member name="P:libeveapi.CharacterList.CharacterListItem.CorporationId">
            <summary>
            Id of the corporation the character is a member of
            </summary>
        </member>
        <member name="T:libeveapi.JournalEntries">
            <summary>
            Represents a character or corporation journal entry from the eve api
            http://wiki.eve-dev.net/APIv2_Char_JournalEntries_XML
            </summary>
        </member>
        <member name="M:libeveapi.JournalEntries.FromXmlDocument(System.Xml.XmlDocument)">
            <summary>
            Create an JournalEntryItemList by parsing an XmlDocument response from the eveapi
            </summary>
            <param name="xmlDoc">An XML Document containing the JournalEntries List</param>
            <returns><see cref="T:libeveapi.JournalEntries"/></returns>
        </member>
        <member name="M:libeveapi.JournalEntries.ParseTransactionRow(System.Xml.XmlNode)">
            <summary>
            Create an JournalEntryItem by parsing a single row
            </summary>
            <param name="journalTransactionRow"></param>
            <returns></returns>
        </member>
=======
>>>>>>> .r330
        <member name="P:libeveapi.JournalEntries.JournalEntryItems">
            <summary>
            
            </summary>
        </member>
        <member name="T:libeveapi.JournalEntries.JournalEntryItem">
            <summary>
            Contains the data for one journal entry item
            </summary>
        </member>
        <member name="P:libeveapi.JournalEntries.JournalEntryItem.Date">
            <summary>
            The date / time of the entry
            </summary>
        </member>
        <member name="P:libeveapi.JournalEntries.JournalEntryItem.DateLocal">
            <summary>
            The date / time of the entry in local time
            </summary>
        </member>
        <member name="P:libeveapi.JournalEntries.JournalEntryItem.RefId">
            <summary>
            A unique referenceId for each transaction
            </summary>
        </member>
        <member name="P:libeveapi.JournalEntries.JournalEntryItem.RefTypeId">
            <summary>
            The typeId of the item that is referenced in the entry
            </summary>
        </member>
        <member name="P:libeveapi.JournalEntries.JournalEntryItem.OwnerName1">
            <summary>
            Name of the person/corp giving money
            </summary>
        </member>
        <member name="P:libeveapi.JournalEntries.JournalEntryItem.OwnerId1">
            <summary>
            TypeId/CharId of the person/corp giving money
            </summary>
        </member>
        <member name="P:libeveapi.JournalEntries.JournalEntryItem.OwnerName2">
            <summary>
            Name of the person/corp recieving money
            </summary>
        </member>
        <member name="P:libeveapi.JournalEntries.JournalEntryItem.OwnerId2">
            <summary>
            TypeId/CharId of the person/corp recieving money
            </summary>
        </member>
        <member name="P:libeveapi.JournalEntries.JournalEntryItem.ArgName1">
            <summary>
            This is either the system where the transaction took place
            For example when recieving bounties, or "EVE System" if used
            for other items like buying and selling
            </summary>
        </member>
        <member name="P:libeveapi.JournalEntries.JournalEntryItem.ArgId1">
            <summary>
            This is an argument Id that goes with the argument
            Use the data from: http://wiki.eve-dev.net/APIv2_Eve_RefTypes_XML
            to determine what this is used for
            </summary>
        </member>
        <member name="P:libeveapi.JournalEntries.JournalEntryItem.Amount">
            <summary>
            The amount of the transaction
            </summary>
        </member>
        <member name="P:libeveapi.JournalEntries.JournalEntryItem.Balance">
            <summary>
            The balance left in the account after the transaction
            </summary>
        </member>
        <member name="P:libeveapi.JournalEntries.JournalEntryItem.Reason">
            <summary>
            This is the note attached to the transaction if any
            If exists for bounties this is the list of people killed and how many
            Ex: TypeId:Number;TypeId:Number
            </summary>
        </member>
        <member name="T:libeveapi.JournalEntryType">
            <summary>
            Represents what type of journal entry, corporation or character
            </summary>
        </member>
        <member name="F:libeveapi.JournalEntryType.Corporation">
            <summary>
            Corporation journal entry
            </summary>
        </member>
        <member name="F:libeveapi.JournalEntryType.Character">
            <summary>
            Character journal entry
            </summary>
        </member>
        <member name="T:libeveapi.CharacterSheet">
            <summary>
            Detailed information about a character
            </summary>
        </member>
        <member name="M:libeveapi.CharacterSheet.FromXmlDocument(System.Xml.XmlDocument)">
            <summary>
            Create an CharacterSheet by parsing an XmlDocument response from the eveapi
            </summary>
            <param name="xmlDoc">An XML Document containing the CharacterSheet</param>
            <returns><see cref="T:libeveapi.CharacterSheet"/></returns>
        </member>
        <member name="M:libeveapi.CharacterSheet.parseAugmentator(System.String,System.Xml.XmlDocument,libeveapi.CharacterSheet.AttributeEnhancer)">
            <summary>
            Parses out each implant that the character has in
            </summary>
            <param name="xpath">The xpath location of the implant in the xml</param>
            <param name="xmlDoc">The xml document</param>
            <param name="ae">The correct attribute enhancer to modify</param>
            <returns></returns>
        </member>
        <member name="P:libeveapi.CharacterSheet.CharacterId">
            <summary>
            The eve assigned characterId
            </summary>
        </member>
        <member name="P:libeveapi.CharacterSheet.Name">
            <summary>
            The name of the character
            </summary>
        </member>
        <member name="P:libeveapi.CharacterSheet.Race">
            <summary>
            The race of the character
            </summary>
        </member>
        <member name="P:libeveapi.CharacterSheet.BloodLine">
            <summary>
            The bloodline of the character
            </summary>
        </member>
        <member name="P:libeveapi.CharacterSheet.Gender">
            <summary>
            The gender of the character (currently male/female)
            </summary>
        </member>
        <member name="P:libeveapi.CharacterSheet.CorporationName">
            <summary>
            The name of the corporation that the character is in
            </summary>
        </member>
        <member name="P:libeveapi.CharacterSheet.CorporationId">
            <summary>
            The eve generated Id of the corporation
            </summary>
        </member>
        <member name="P:libeveapi.CharacterSheet.Balance">
            <summary>
            The character's current wallet balance
            </summary>
        </member>
        <member name="P:libeveapi.CharacterSheet.Intelligence">
            <summary>
            The character's intelligence attribute
            </summary>
        </member>
        <member name="P:libeveapi.CharacterSheet.Memory">
            <summary>
            The character's memory attribute
            </summary>
        </member>
        <member name="P:libeveapi.CharacterSheet.Charisma">
            <summary>
            The character's charisma attribute
            </summary>
        </member>
        <member name="P:libeveapi.CharacterSheet.Perception">
            <summary>
            The character's perception attribute
            </summary>
        </member>
        <member name="P:libeveapi.CharacterSheet.Willpower">
            <summary>
            The character's willpower attribute
            </summary>
        </member>
        <member name="P:libeveapi.CharacterSheet.MemoryBonus">
            <summary>
            Memory Implant
            </summary>
        </member>
        <member name="P:libeveapi.CharacterSheet.WillpowerBonus">
            <summary>
            Willpower Implant
            </summary>
        </member>
        <member name="P:libeveapi.CharacterSheet.PerceptionBonus">
            <summary>
            Perception Implant
            </summary>
        </member>
        <member name="P:libeveapi.CharacterSheet.IntelligenceBonus">
            <summary>
            Intelligence Implant
            </summary>
        </member>
        <member name="P:libeveapi.CharacterSheet.CharismaBonus">
            <summary>
            Charisma Implant
            </summary>
        </member>
        <member name="P:libeveapi.CharacterSheet.SkillItemList">
            <summary>
            The list of retrieved skills
            </summary>
        </member>
        <member name="T:libeveapi.CharacterSheet.SkillItem">
            <summary>
            Stores valid information about each skill in the character sheet
            </summary>
        </member>
        <member name="P:libeveapi.CharacterSheet.SkillItem.TypeId">
            <summary>
            TypeId of the skill
            </summary>
        </member>
        <member name="P:libeveapi.CharacterSheet.SkillItem.Skillpoints">
            <summary>
            Current number of skillpoints the character has in the skill
            </summary>
        </member>
        <member name="P:libeveapi.CharacterSheet.SkillItem.Level">
            <summary>
            The highest completed level of the skill
            </summary>
        </member>
        <member name="P:libeveapi.CharacterSheet.SkillItem.Unpublished">
            <summary>
            Flag if the skill is an unpublished skill
            </summary>
        </member>
        <member name="T:libeveapi.CharacterSheet.AttributeEnhancer">
            <summary>
            Contains information about each attributeEnhancer (implant)
            </summary>
        </member>
        <member name="P:libeveapi.CharacterSheet.AttributeEnhancer.Name">
            <summary>
            The name of the implant
            </summary>
        </member>
        <member name="P:libeveapi.CharacterSheet.AttributeEnhancer.Value">
            <summary>
            The implant's effect on that attribute
            </summary>
        </member>
        <member name="T:libeveapi.WalletTransactions">
            <summary>
            Returns market transactions for a character.
            http://wiki.eve-dev.net/APIv2_Char_MarketTransactions_XML
            </summary>
        </member>
        <member name="M:libeveapi.WalletTransactions.FromXmlDocument(System.Xml.XmlDocument)">
            <summary>
            Create an WalletTransaction by parsing an XmlDocument response from the eveapi
            </summary>
            <param name="xmlDoc">An XML Document Containing Wallet Transaction Data</param>
            <returns></returns>
        </member>
        <member name="M:libeveapi.WalletTransactions.ParseTransactionRow(System.Xml.XmlNode)">
            <summary>
            Create an WalletTransactionItem by parsing a single row
            </summary>
            <param name="walletTransactionRow"></param>
            <returns></returns>
        </member>
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItems">
            <summary>
            
            </summary>
        </member>
        <member name="T:libeveapi.WalletTransactions.WalletTransactionItem">
            <summary>
            Contains information about one wallet transaction
            </summary>
        </member>
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.TransactionDateTime">
            <summary>
            This is the date and time when the transaction took place in ccp time
            </summary>
        </member>
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.TransactionDateTimeLocal">
            <summary>
            This is the date and time when the transaction took place in local time
            </summary>
        </member>
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.TransactionId">
            <summary>
            This is the transactionId that is assigned to the transaction
            </summary>
        </member>
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.Quantity">
            <summary>
            This is the quantity of the item
            </summary>
        </member>
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.TypeName">
            <summary>
            This is the name of the item in the transaction
            </summary>
        </member>
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.TypeId">
            <summary>
            This is the typeId of the item referenced in the transaction
            </summary>
        </member>
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.Price">
            <summary>
            This is the price of the item in the transaction
            </summary>
        </member>
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.ClientId">
            <summary>
            The client's Id
            </summary>
        </member>
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.ClientName">
            <summary>
            The client's name
            </summary>
        </member>
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.CharacterId">
            <summary>
            The character who initiated the transaction's id 
            This is only present when viewing corp transactions, otherwise
            it is assumed to be the character accessing the data
            </summary>
        </member>
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.CharacterName">
            <summary>
            The character who initiated the transaction's name 
            This is only present when viewing corp transactions, otherwise
            it is assumed to be the character accessing the data
            </summary>
        </member>
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.StationId">
            <summary>
            The Id of the station where the transaction took place
            </summary>
        </member>
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.StationName">
            <summary>
            The name of the station where the transaction took place
            </summary>
        </member>
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.TransactionType">
            <summary>
            This is the type of transaction type, sell or buy
            </summary>
        </member>
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.TransactionFor">
            <summary>
            This is who the transaction was for (personal or corporation)
            </summary>
        </member>
        <member name="T:libeveapi.WalletTransactionListType">
            <summary>
            If the transaction is a corporation or character transaction
            </summary>
        </member>
        <member name="F:libeveapi.WalletTransactionListType.Corporation">
            <summary>
            A corporation transaction
            </summary>
        </member>
        <member name="F:libeveapi.WalletTransactionListType.Character">
            <summary>
            A character transaction
            </summary>
        </member>
        <member name="T:libeveapi.MarketOrders">
            <summary>
            Returns a list of market orders that are either not expired or have expired in the past week (at most).
            http://wiki.eve-dev.net/APIv2_Corp_MarketOrders_XML
            </summary>
        </member>
        <member name="M:libeveapi.MarketOrders.FromXmlDocument(System.Xml.XmlDocument)">
            <summary>
            Create an MarketOrderList by parsing an XmlDocument response from the eveapi
            </summary>
            <param name="xmlDoc"></param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.MarketOrders.ParseTransactionRow(System.Xml.XmlNode)">
=======
        <member name="P:libeveapi.CorporationSheet.CorporationId">
>>>>>>> .r330
            <summary>
            Create an MarketOrderItem by parsing a single row
            </summary>
            <param name="marketOrderRow"></param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MarketOrders.MarketOrderItems">
=======
        <member name="P:libeveapi.CorporationSheet.CorporationName">
>>>>>>> .r330
            <summary>
            
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.MarketOrders.MarketOrderItem">
=======
        <member name="P:libeveapi.CorporationSheet.Ticker">
>>>>>>> .r330
            <summary>
            A single market order associated with a person or corporation
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.OrderType">
=======
        <member name="P:libeveapi.CorporationSheet.CeoId">
>>>>>>> .r330
            <summary>
            Order type (Buy or Sell)
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.OrderId">
=======
        <member name="P:libeveapi.CorporationSheet.CeoName">
>>>>>>> .r330
            <summary>
            Order id, not forever unique but for this pull they will be unique
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.CharId">
=======
        <member name="P:libeveapi.CorporationSheet.StationId">
>>>>>>> .r330
            <summary>
            Character Id of the character who placed the market order
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.StationId">
=======
        <member name="P:libeveapi.CorporationSheet.StationName">
>>>>>>> .r330
            <summary>
            The Id of the station that the order was placed in
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.VolEntered">
=======
        <member name="P:libeveapi.CorporationSheet.Description">
>>>>>>> .r330
            <summary>
            The quantity of the items required/offered when the order was placed
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.VolRemaining">
=======
        <member name="P:libeveapi.CorporationSheet.Url">
>>>>>>> .r330
            <summary>
            The quantitiy of items that are still for sale/ still required
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.MinVolume">
=======
        <member name="P:libeveapi.CorporationSheet.AllianceId">
>>>>>>> .r330
            <summary>
            For bids (buy orders) the minimum quantity that must be sold in one
            sale so that the order is accepted.
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.OrderState">
=======
        <member name="P:libeveapi.CorporationSheet.AllianceName">
>>>>>>> .r330
            <summary>
            See <see cref="T:libeveapi.MarketOrders.MarketOrderState"/> for full descriptions of each order state
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.TypeId">
=======
        <member name="P:libeveapi.CorporationSheet.TaxRate">
>>>>>>> .r330
            <summary>
            This is the typeId of the item that is being bought/sold
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.Range">
=======
        <member name="P:libeveapi.CorporationSheet.MemberCount">
>>>>>>> .r330
            <summary>
            This is the range of the order
            For sell orders it is always 32767
            For buy orders it is either -1 = station, 0 = solar system
            Any number above 1 is number of jumps in region
            And 32767 means region
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.AccountKey">
=======
        <member name="P:libeveapi.CorporationSheet.MemberLimit">
>>>>>>> .r330
            <summary>
            This is which wallet the order is using, for a personal order
            this will always be 1000, for corporation orders it can be 1000-1006
            depending on which wallet is being used
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.Duration">
=======
        <member name="P:libeveapi.CorporationSheet.Shares">
>>>>>>> .r330
            <summary>
            How many days this order is good for. Expiration is issued + duration in days
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.Escrow">
=======
        <member name="P:libeveapi.CorporationSheet.Divisions">
>>>>>>> .r330
            <summary>
            How much ISK is in escrow. Valid for buy orders only (I believe).
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.Price">
=======
        <member name="P:libeveapi.CorporationSheet.WalletDivisions">
>>>>>>> .r330
            <summary>
            The cost per unit for this order
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.Bid">
=======
        <member name="P:libeveapi.CorporationSheet.Logo">
>>>>>>> .r330
            <summary>
            If true this is a bid or buy order, else it is a sell order
            </summary>
        </member>
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.Issued">
            <summary>
            This is when the order was issued
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MarketOrders.MarketOrderItem.IssuedLocal">
=======
        <member name="P:libeveapi.CorporationSheet.Division.AccountKey">
>>>>>>> .r330
            <summary>
            This is when the order was issued in local time
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.MarketOrders.MarketOrderState">
=======
        <member name="P:libeveapi.CorporationSheet.Division.Description">
>>>>>>> .r330
            <summary>
            This is the current state of the market order, letting you know if the
            item is still on the market or not.
            </summary>
        </member>
        <member name="F:libeveapi.MarketOrders.MarketOrderState.OpenActive">
            <summary>
            If the market order is still active and up on the market
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.MarketOrders.MarketOrderState.Closed">
=======
        <member name="P:libeveapi.CorporationSheet.WalletDivision.AccountKey">
>>>>>>> .r330
            <summary>
            The order has been closed
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.MarketOrders.MarketOrderState.ExpiredFulfilled">
=======
        <member name="P:libeveapi.CorporationSheet.WalletDivision.Description">
>>>>>>> .r330
            <summary>
            The order has expired, or has been fufilled so it is no longer active
            </summary>
        </member>
        <member name="F:libeveapi.MarketOrders.MarketOrderState.Canceled">
            <summary>
            The order was canceled
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.MarketOrders.MarketOrderState.Pending">
=======
        <member name="P:libeveapi.CorporationSheet.CorpLogo.GraphicId">
>>>>>>> .r330
            <summary>
            The order is currently pending, and not on the market
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.MarketOrders.MarketOrderState.CharacterDeleted">
=======
        <member name="P:libeveapi.CorporationSheet.CorpLogo.Shape1">
>>>>>>> .r330
            <summary>
            The character that this order was associated with has been deleted
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.MarketOrders.MarketOrderType">
=======
        <member name="P:libeveapi.CorporationSheet.CorpLogo.Shape2">
>>>>>>> .r330
            <summary>
            What type of order was it on the market, buy or sell
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.MarketOrders.MarketOrderType.Buy">
=======
        <member name="P:libeveapi.CorporationSheet.CorpLogo.Shape3">
>>>>>>> .r330
            <summary>
            Denotes a buy order
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.MarketOrders.MarketOrderType.Sell">
=======
        <member name="P:libeveapi.CorporationSheet.CorpLogo.Color1">
>>>>>>> .r330
            <summary>
            Denotes a sell order
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.MarketOrdersListType">
=======
        <member name="P:libeveapi.CorporationSheet.CorpLogo.Color2">
>>>>>>> .r330
            <summary>
            If this is a corporation or (peronal) character market order
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.MarketOrdersListType.Corporation">
=======
        <member name="P:libeveapi.CorporationSheet.CorpLogo.Color3">
>>>>>>> .r330
            <summary>
            A corporation market order
            </summary>
        </member>
        <member name="F:libeveapi.MarketOrdersListType.Character">
            <summary>
            A personal market order
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.AssetList">
            <summary>
            Holds the full asset list of a corporation or character
            </summary>
        </member>
=======
>>>>>>> .r330
        <member name="M:libeveapi.AssetList.FromXmlDocument(System.Xml.XmlDocument)">
            <summary>
            Create an AssetList by parsing an XmlDocument response from the eveapi
            </summary>
            <param name="xmlDoc">An XML Dcoument containing Asset Information</param>
            <returns><see cref="T:libeveapi.AssetList"/>Return an AssetList object</returns>
        </member>
        <member name="M:libeveapi.AssetList.ParseAssetRow(System.Xml.XmlNode)">
            <summary>
            Create an AssetListItem by parsing a single row
            Recursively parses all contained assets
            </summary>
            <param name="assetRow"></param>
            <returns></returns>
        </member>
        <member name="P:libeveapi.AssetList.AssetListItems">
            <summary>
            
            </summary>
        </member>
        <member name="T:libeveapi.AssetList.AssetListItem">
            <summary>
            Represents one full asset and all information associated with it for a
            character or corporation
            </summary>
        </member>
        <member name="P:libeveapi.AssetList.AssetListItem.ItemId">
            <summary>
            Unique Id for this item. This is only guaranteed to be unique within 
            this page load. Ids are recycled over time and it is possible for this 
            to happen. Also, items are not guaranteed to maintain the same itemId 
            over time. When they are repackaged, stacks are split or merged, when 
            they're assembled, and other actions can cause itemIds to change.
            </summary>
        </member>
        <member name="P:libeveapi.AssetList.AssetListItem.LocationId">
            <summary>
            References a solar system or station. Note that this column is not present in 
            the sub-asset lists, i.e. for things inside of other things.
            </summary>
        </member>
        <member name="P:libeveapi.AssetList.AssetListItem.TypeId">
            <summary>
            The type of this item. References the invTypes table.
            </summary>
        </member>
        <member name="P:libeveapi.AssetList.AssetListItem.Quantity">
            <summary>
            How many items are in this stack.
            </summary>
        </member>
        <member name="P:libeveapi.AssetList.AssetListItem.Flag">
            <summary>
            Indicates something about this item's storage location. The flag 
            is used to differentiate between hangar divisions, drone bay, 
            fitting location, and similar. Please see the <see cref="T:libeveapi.InventoryFlagType"/>.
            </summary>
        </member>
        <member name="P:libeveapi.AssetList.AssetListItem.Singleton">
            <summary>
            If true, indicates that this item is a singleton. This means that 
            the item is not packaged.
            </summary>
        </member>
        <member name="P:libeveapi.AssetList.AssetListItem.Contents">
            <summary>
            The items contained in this item if any
            </summary>
        </member>
        <member name="T:libeveapi.InventoryFlagType">
            <summary>
            EVE stores items in a location with a value we call the "flag." 
            This value is used to indicate more data about the item's location. 
            For example, instead of having different locations for each of the 
            modules, we instead have the single location (the ship) with many flags. 
            The flags indicate if the item is in cargo or fitted, and if fitted, to which slot.
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagNone">
            <summary>
            None
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagWallet">
            <summary>
            Wallet
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagFactory">
            <summary>
            Factory
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagHangar">
            <summary>
            Hangar
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagCargo">
            <summary>
            Cargo
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagBriefcase">
            <summary>
            Briefcase
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagSkill">
            <summary>
            Skill
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagReward">
            <summary>
            Reward
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagConnected">
            <summary>
            Character in station connected
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagDisconnected">
            <summary>
            Character in station offline
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagLoSlot0">
            <summary>
            Low power slot 1
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagLoSlot1">
            <summary>
            Low power slot 2
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagLoSlot2">
            <summary>
            Low power slot 3
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagLoSlot3">
            <summary>
            Low power slot 4
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagLoSlot4">
            <summary>
            Low power slot 5
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagLoSlot5">
            <summary>
            Low power slot 6
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagLoSlot6">
            <summary>
            Low power slot 7
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagLoSlot7">
            <summary>
            Low power slot 8
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagMedSlot0">
            <summary>
            Medium power slot 1
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagMedSlot1">
            <summary>
            Medium power slot 2
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagMedSlot2">
            <summary>
            Medium power slot 3
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagMedSlot3">
            <summary>
            Medium power slot 4
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagMedSlot4">
            <summary>
            Medium power slot 5
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagMedSlot5">
            <summary>
            Medium power slot 6
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagMedSlot6">
            <summary>
            Medium power slot 7
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagMedSlot7">
            <summary>
            Medium power slot 8
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagHiSlot0">
            <summary>
            High power slot 1
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagHiSlot1">
            <summary>
            High power slot 2
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagHiSlot2">
            <summary>
            High power slot 3
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagHiSlot3">
            <summary>
            High power slot 4
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagHiSlot4">
            <summary>
            High power slot 5
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagHiSlot5">
            <summary>
            High power slot 6
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagHiSlot6">
            <summary>
            High power slot 7
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagHiSlot7">
            <summary>
            High power slot 8
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagFixedSlot">
            <summary>
            Fixed Slot
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagCapsule">
            <summary>
            Capsule
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagPilot">
            <summary>
            Pilot
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagPassenger">
            <summary>
            Passenger
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagBoardingGate">
            <summary>
            Boarding gate
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagCrew">
            <summary>
            Crew
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagSkillInTraining">
            <summary>
            Skill in training
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagCorpMarket">
            <summary>
            Corporation Market Deliveries / Returns
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagLocked">
            <summary>
            Locked item, can not be moved unless unlocked
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagUnlocked">
            <summary>
            Unlocked item, can be moved
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagOfficeSlot1">
            <summary>
            Office slot 1
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagOfficeSlot2">
            <summary>
            Office slot 2
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagOfficeSlot3">
            <summary>
            Office slot 3
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagOfficeSlot4">
            <summary>
            Office slot 4
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagOfficeSlot5">
            <summary>
            Office slot 5
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagOfficeSlot6">
            <summary>
            Office slot 6
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagOfficeSlot7">
            <summary>
            Office slot 7
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagOfficeSlot8">
            <summary>
            Office slot 8
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagOfficeSlot9">
            <summary>
            Office slot 9
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagOfficeSlot10">
            <summary>
            Office slot 10
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagOfficeSlot11">
            <summary>
            Office slot 11
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagOfficeSlot12">
            <summary>
            Office slot 12
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagOfficeSlot13">
            <summary>
            Office slot 13
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagOfficeSlot14">
            <summary>
            Office slot 14
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagOfficeSlot15">
            <summary>
            Office slot 15
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagOfficeSlot16">
            <summary>
            Office slot 16
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagBonus">
            <summary>
            Bonus
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagDroneBay">
            <summary>
            Drone Bay
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagBooster">
            <summary>
            Booster
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagImplant">
            <summary>
            Implant
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagShipHangar">
            <summary>
            Ship Hangar
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagShipOffline">
            <summary>
            Ship Offline
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagRigSlot0">
            <summary>
            Rig power slot 1
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagRigSlot1">
            <summary>
            Rig power slot 2
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagRigSlot2">
            <summary>
            Rig power slot 3
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagRigSlot3">
            <summary>
            Rig power slot 4
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagRigSlot4">
            <summary>
            Rig power slot 5
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagRigSlot5">
            <summary>
            Rig power slot 6
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagRigSlot6">
            <summary>
            Rig power slot 7
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagRigSlot7">
            <summary>
            Rig power slot 8
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagFactoryOperation">
            <summary>
            Factory Background Operation
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagCorpSAG2">
            <summary>
            Corp Security Access Group 2
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagCorpSAG3">
            <summary>
            Corp Security Access Group 3
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagCorpSAG4">
            <summary>
            Corp Security Access Group 4
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagCorpSAG5">
            <summary>
            Corp Security Access Group 5
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagCorpSAG6">
            <summary>
            Corp Security Access Group 6
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagCorpSAG7">
            <summary>
            Corp Security Access Group 7
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagSecondaryStorage">
            <summary>
            Secondary Storage
            </summary>
        </member>
        <member name="F:libeveapi.InventoryFlagType.FlagUnknown">
            <summary>
            Unknown Flag
            </summary>
        </member>
        <member name="T:libeveapi.AssetListType">
            <summary>
            A corporation or character asset
            </summary>
        </member>
        <member name="F:libeveapi.AssetListType.Corporation">
            <summary>
            It is a corporation asset
            </summary>
        </member>
        <member name="F:libeveapi.AssetListType.Character">
            <summary>
            It is a character asset
            </summary>
        </member>
        <member name="T:libeveapi.EveApi">
            <summary>
            
            </summary>
        </member>
        <member name="M:libeveapi.EveApi.SetProxy(System.String,System.Int32)">
            <summary>
            Sets a proxy server for the connection to run through
            </summary>
            <param name="url">The url for the proxy server</param>
            <param name="port">The port for the proxy server</param>
            <returns></returns>
        </member>
        <member name="M:libeveapi.EveApi.SetProxy(System.String,System.Int32,System.String,System.String)">
            <summary>
            Sets a proxy server for the connection to run through
            </summary>
            <param name="url">The url for the proxy server</param>
            <param name="port">The port for the proxy server</param>
            <param name="username">The username for the proxy server</param>
            <param name="password">The password for the proxy server</param>
            <returns></returns>
        </member>
        <member name="M:libeveapi.EveApi.UnsetProxy">
            <summary>
            Unsets the proxy server
            </summary>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.SetUserAgent(System.String)">
            <summary>
            Allows modification of the user agent to add the program's name into the request for tracking
            </summary>
            <param name="userAgent">The userAgent string to add to all outgoing webrequests</param>
            <returns></returns>
        </member>
=======
>>>>>>> .r330
        <member name="M:libeveapi.EveApi.GetAccountCharacters(System.Int32,System.String)">
            <summary>
            Returns a list of all characters on an account
            </summary>
            <param name="userId">userId of the account for authentication</param>
            <param name="apiKey">limited or full access api key of account</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetAccountCharacters(System.Int32,System.String,System.Boolean)">
=======
        <member name="P:libeveapi.MapKills.MapSystemKills">
            <summary>
            
            </summary>
        </member>
        <member name="T:libeveapi.MapKills.MapKillsItem">
>>>>>>> .r330
            <summary>
            Returns a list of all characters on an account
            </summary>
            <param name="userId">userId of the account for authentication</param>
            <param name="apiKey">limited or full access api key of account</param>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetAccountBalance(libeveapi.AccountBalanceType,System.Int32,System.Int32,System.String)">
=======
        <member name="P:libeveapi.MapKills.MapKillsItem.SolarSystemId">
>>>>>>> .r330
            <summary>
            Returns the ISK balance of a corporation or character
            </summary>
            <param name="accountBalanceType">retrieve balance for character or corporation</param>
            <param name="userId">user ID of account for authentication</param>
            <param name="characterId">
            For character balance: The character you are requesting data for
            For corporation balance: Character Id of a char with director/CEO access in the corp you want the balance for
            </param>
            <param name="fullApiKey">Full access api key of account</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetAccountBalance(libeveapi.AccountBalanceType,System.Int32,System.Int32,System.String,System.Boolean)">
=======
        <member name="P:libeveapi.MapKills.MapKillsItem.ShipKills">
>>>>>>> .r330
            <summary>
            Returns the ISK balance of a corporation or character
            </summary>
            <param name="accountBalanceType">retrieve balance for character or corporation</param>
            <param name="userId">user ID of account for authentication</param>
            <param name="characterId">
            For character balance: The character you are requesting data for
            For corporation balance: Character Id of a char with director/CEO access in the corp you want the balance for
            </param>
            <param name="fullApiKey">Full access api key of account</param>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetStarbaseList(System.Int32,System.Int32,System.String)">
=======
        <member name="P:libeveapi.MapKills.MapKillsItem.FactionKills">
>>>>>>> .r330
            <summary>
            Returns a list of starbases owned by a corporation
            </summary>
            <param name="userId">user Id of account for authentication</param>
            <param name="characterId">Character Id of a char with director/CEO access in the corp you want the starbases for</param>
            <param name="fullApiKey">Full access api key of account</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetStarbaseList(System.Int32,System.Int32,System.String,System.Boolean)">
=======
        <member name="P:libeveapi.MapKills.MapKillsItem.PodKills">
>>>>>>> .r330
            <summary>
            Returns a list of starbases owned by a corporation
            </summary>
            <param name="userId">user Id of account for authentication</param>
            <param name="characterId">Character Id of a char with director/CEO access in the corp you want the starbases for</param>
            <param name="fullApiKey">Full access api key of account</param>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns></returns>
        </member>
        <member name="M:libeveapi.EveApi.GetCharacterIdName(System.String)">
            <summary>
            Returns the character id and character name, given the one or the other
            </summary>
            <param name="charactername">character name string, use to look up character id</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetCharacterIdName(System.String,System.Boolean)">
            <summary>
            Returns the character id and character name, given the one or the other
            </summary>
            <param name="charactername">character name string, use to look up character id</param>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns></returns>
        </member>
=======
>>>>>>> .r330
        <member name="M:libeveapi.EveApi.GetCharacterIdName(System.Int32)">
            <summary>
            Returns the character id and character name, given the one or the other
            </summary>
            <param name="characterId">characterId used to look up character name</param>
            <returns></returns>
        </member>
        <member name="M:libeveapi.EveApi.GetCharacterIdName(System.Int32,System.Boolean)">
            <summary>
            Returns the character id and character name, given the one or the other
            </summary>
            <param name="characterId">characterId used to look up character name</param>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetStarbaseDetail(System.Int32,System.Int32,System.String,System.Int32)">
=======
        <member name="P:libeveapi.KillLog.Kills">
            <summary>
            Array containing all the kills returned from the api call 
            </summary>
        </member>
        <member name="T:libeveapi.KillLog.Kill">
>>>>>>> .r330
            <summary>
            Returns the settings and fuel status of a starbase
            </summary>
            <param name="userId">user Id of account for authentication</param>
            <param name="characterId">Character Id of a char with director/CEO access in the corp that owns the starbase</param>
            <param name="fullApiKey">Full access api key of account</param>
            <param name="itemId">Item Id of the starbase as given in the starbase list</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetStarbaseDetail(System.Int32,System.Int32,System.String,System.Int32,System.Boolean)">
=======
        <member name="P:libeveapi.KillLog.Kill.KillId">
>>>>>>> .r330
            <summary>
            Returns the settings and fuel status of a starbase
            </summary>
            <param name="userId">user Id of account for authentication</param>
            <param name="characterId">Character Id of a char with director/CEO access in the corp that owns the starbase</param>
            <param name="fullApiKey">Full access api key of account</param>
            <param name="itemId">Item Id of the starbase as given in the starbase list</param>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetErrorList">
=======
        <member name="P:libeveapi.KillLog.Kill.SolarSystemId">
>>>>>>> .r330
            <summary>
            Returns a list of error codes that can be returned by the EVE API servers
            </summary>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetErrorList(System.Boolean)">
=======
        <member name="P:libeveapi.KillLog.Kill.KillTime">
>>>>>>> .r330
            <summary>
            Returns a list of error codes that can be returned by the EVE API servers
            </summary>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetAssetList(libeveapi.AssetListType,System.Int32,System.Int32,System.String)">
=======
        <member name="P:libeveapi.KillLog.Kill.KillTimeLocal">
>>>>>>> .r330
            <summary>
            Returns a list of assets owned by a character or corporation.
            </summary>
            <param name="assetListType"><see cref="T:libeveapi.AssetListType"/></param>
            <param name="userId">userId of account for authentication</param>
            <param name="characterId">CharacterId of character for authentication</param>
            <param name="fullApiKey">Full access API key of account</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetAssetList(libeveapi.AssetListType,System.Int32,System.Int32,System.String,System.Boolean)">
=======
        <member name="P:libeveapi.KillLog.Kill.MoonId">
>>>>>>> .r330
            <summary>
            Returns a list of assets owned by a character or corporation.
            </summary>
            <param name="assetListType"><see cref="T:libeveapi.AssetListType"/></param>
            <param name="userId">userId of account for authentication</param>
            <param name="characterId">CharacterId of character for authentication</param>
            <param name="fullApiKey">Full access API key of account</param>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetKillLog(libeveapi.KillLogType,System.Int32,System.Int32,System.String,System.Int32)">
=======
        <member name="P:libeveapi.KillLog.Kill.Victim">
>>>>>>> .r330
            <summary>
            Retrieves the Kill Log for a character or corporation
            </summary>
            <param name="killLogType">KillLogType -- Character/Corporation which kill log do you want to retrieve</param>
            <param name="userId">User ID for authentication</param>
            <param name="characterId">The character your requesting data for</param>
            <param name="fullApiKey">Full Api Key for the account</param>
            <param name="beforeKillID">Returns the most recent kills before the specified Kill ID - used for scrolling back through the log</param>
            <returns>Kill Log object containing the array of kills</returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetKillLog(libeveapi.KillLogType,System.Int32,System.Int32,System.String,System.Int32,System.Boolean)">
=======
        <member name="P:libeveapi.KillLog.Kill.Attackers">
>>>>>>> .r330
            <summary>
            Retrieves the Kill Log for a character or corporation
            </summary>
            <param name="killLogType">KillLogType -- Character/Corporation which kill log do you want to retrieve</param>
            <param name="userId">User ID for authentication</param>
            <param name="characterId">The character your requesting data for</param>
            <param name="fullApiKey">Full Api Key for the account</param>
            <param name="beforeKillID">Returns the most recent kills before the specified Kill ID - used for scrolling back through the log</param>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns>Kill Log object containing the array of kills</returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetKillLog(libeveapi.KillLogType,System.Int32,System.Int32,System.String,System.Boolean)">
=======
        <member name="P:libeveapi.KillLog.Kill.Items">
>>>>>>> .r330
            <summary>
            Retrieves the Kill Log for a character or corporation
            </summary>
            <param name="killLogType">KillLogType -- Character/Corporation which kill log do you want to retrieve</param>
            <param name="userId">User ID for authentication</param>
            <param name="characterId">The character your requesting data for</param>
            <param name="fullApiKey">Full Api Key for the account</param>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns>Kill Log object containing the array of kills</returns>
        </member>
        <member name="M:libeveapi.EveApi.GetKillLog(libeveapi.KillLogType,System.Int32,System.Int32,System.String)">
            <summary>
            Retrieves the Kill Log for a character or corporation
            </summary>
            <param name="killLogType">KillLogType -- Character/Corporation which kill log do you want to retrieve</param>
            <param name="userId">User ID for authentication</param>
            <param name="characterId">The character your requesting data for</param>
            <param name="fullApiKey">Full Api Key for the account</param>
            <returns>Kill Log object containing the array of kills</returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetIndustryJobList(libeveapi.IndustryJobListType,System.Int32,System.Int32,System.String)">
=======
        <member name="P:libeveapi.KillLog.Pilot.CharacterId">
>>>>>>> .r330
            <summary>
            Returns a list of industrial jobs owned by a character or corporation.
            </summary>
            <param name="industryJobListType"><see cref="T:libeveapi.IndustryJobListType"/></param>
            <param name="userId">userId of account for authentication</param>
            <param name="characterId">CharacterId of character for authentication</param>
            <param name="fullApiKey">Full access API key of account</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetIndustryJobList(libeveapi.IndustryJobListType,System.Int32,System.Int32,System.String,System.Boolean)">
=======
        <member name="P:libeveapi.KillLog.Pilot.CharacterName">
>>>>>>> .r330
            <summary>
            Returns a list of industrial jobs owned by a character or corporation.
            </summary>
            <param name="industryJobListType"><see cref="T:libeveapi.IndustryJobListType"/></param>
            <param name="userId">userId of account for authentication</param>
            <param name="characterId">CharacterId of character for authentication</param>
            <param name="fullApiKey">Full access API key of account</param>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetJournalEntryList(libeveapi.JournalEntryType,System.Int32,System.Int32,System.String)">
=======
        <member name="P:libeveapi.KillLog.Pilot.CorporationId">
>>>>>>> .r330
            <summary>
            Returns a list of journal entries owned by a character or corporation.
            </summary>
            <param name="journalEntriesType"><see cref="T:libeveapi.JournalEntryType"/></param>
            <param name="userId">userId of account for authentication</param>
            <param name="characterId">CharacterId of character for authentication</param>
            <param name="fullApiKey">Full access API key of account</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetJournalEntryList(libeveapi.JournalEntryType,System.Int32,System.Int32,System.String,System.Boolean)">
=======
        <member name="P:libeveapi.KillLog.Pilot.CorporationName">
>>>>>>> .r330
            <summary>
            Returns a list of journal entries owned by a character or corporation.
            </summary>
            <param name="journalEntriesType"><see cref="T:libeveapi.JournalEntryType"/></param>
            <param name="userId">userId of account for authentication</param>
            <param name="characterId">CharacterId of character for authentication</param>
            <param name="fullApiKey">Full access API key of account</param>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetJournalEntryList(libeveapi.JournalEntryType,System.Int32,System.Int32,System.String,System.Int32)">
=======
        <member name="P:libeveapi.KillLog.Pilot.AllianceId">
>>>>>>> .r330
            <summary>
            Returns a list of journal entries owned by a character or corporation.
            </summary>
            <param name="journalEntriesType"><see cref="T:libeveapi.JournalEntryType"/></param>
            <param name="userId">userId of account for authentication</param>
            <param name="characterId">CharacterId of character for authentication</param>
            <param name="fullApiKey">Full access API key of account</param>
            <param name="beforeRefId">Retrieve entries after this refId</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetJournalEntryList(libeveapi.JournalEntryType,System.Int32,System.Int32,System.String,System.Int32,System.Boolean)">
=======
        <member name="P:libeveapi.KillLog.Pilot.AllianceName">
>>>>>>> .r330
            <summary>
            Returns a list of journal entries owned by a character or corporation.
            </summary>
            <param name="journalEntriesType"><see cref="T:libeveapi.JournalEntryType"/></param>
            <param name="userId">userId of account for authentication</param>
            <param name="characterId">CharacterId of character for authentication</param>
            <param name="fullApiKey">Full access API key of account</param>
            <param name="beforeRefId">Retrieve entries after this refId</param>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetMarketOrderList(libeveapi.MarketOrdersListType,System.Int32,System.Int32,System.String)">
=======
        <member name="P:libeveapi.KillLog.Pilot.ShipTypeId">
>>>>>>> .r330
            <summary>
            Returns a list of market orders owned by a character or corporation.
            </summary>
            <param name="marketOrdersListType"><see cref="T:libeveapi.MarketOrdersListType"/></param>
            <param name="userId">userId of account for authentication</param>
            <param name="characterId">CharacterId of character for authentication</param>
            <param name="fullApiKey">Full access API key of account</param>
            <returns></returns>
        </member>
        <member name="M:libeveapi.EveApi.GetMarketOrderList(libeveapi.MarketOrdersListType,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns a list of market orders owned by a character or corporation.
            </summary>
            <param name="marketOrdersListType"><see cref="T:libeveapi.MarketOrdersListType"/></param>
            <param name="userId">userId of account for authentication</param>
            <param name="characterId">CharacterId of character for authentication</param>
            <param name="fullApiKey">Full access API key of account</param>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetWalletTransactionsList(libeveapi.WalletTransactionListType,System.Int32,System.Int32,System.String)">
=======
        <member name="P:libeveapi.KillLog.VictimPilot.DamageTaken">
>>>>>>> .r330
            <summary>
            Returns a list of market transactions (wallet transactions) owned by a character or corporation.
            </summary>
            <param name="walletTransactionType"><see cref="T:libeveapi.WalletTransactionListType"/></param>
            <param name="userId">userId of account for authentication</param>
            <param name="characterId">CharacterId of character for authentication</param>
            <param name="fullApiKey">Full access API key of account</param>
            <returns></returns>
        </member>
        <member name="M:libeveapi.EveApi.GetWalletTransactionsList(libeveapi.WalletTransactionListType,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns a list of market transactions (wallet transactions) owned by a character or corporation.
            </summary>
            <param name="walletTransactionType"><see cref="T:libeveapi.WalletTransactionListType"/></param>
            <param name="userId">userId of account for authentication</param>
            <param name="characterId">CharacterId of character for authentication</param>
            <param name="fullApiKey">Full access API key of account</param>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetWalletTransactionsList(libeveapi.WalletTransactionListType,System.Int32,System.Int32,System.String,System.Int32)">
=======
        <member name="P:libeveapi.KillLog.Attacker.SecurityStatus">
>>>>>>> .r330
            <summary>
            Returns a list of market transactions (wallet transactions) owned by a character or corporation.
            </summary>
            <param name="walletTransactionType"><see cref="T:libeveapi.WalletTransactionListType"/></param>
            <param name="userId">userId of account for authentication</param>
            <param name="characterId">CharacterId of character for authentication</param>
            <param name="fullApiKey">Full access API key of account</param>
            <param name="beforeTransId">retrieve up to 1000 entries after this transactionId</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetWalletTransactionsList(libeveapi.WalletTransactionListType,System.Int32,System.Int32,System.String,System.Int32,System.Boolean)">
=======
        <member name="P:libeveapi.KillLog.Attacker.DamageDone">
>>>>>>> .r330
            <summary>
            Returns a list of market transactions (wallet transactions) owned by a character or corporation.
            </summary>
            <param name="walletTransactionType"><see cref="T:libeveapi.WalletTransactionListType"/></param>
            <param name="userId">userId of account for authentication</param>
            <param name="characterId">CharacterId of character for authentication</param>
            <param name="fullApiKey">Full access API key of account</param>
            <param name="beforeTransId">retrieve up to 1000 entries after this transactionId</param>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetRefTypesList">
=======
        <member name="P:libeveapi.KillLog.Attacker.FinalBlow">
>>>>>>> .r330
            <summary>
            Returns a list of RefTypes that are used by certain API Calls
            </summary>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetRefTypesList(System.Boolean)">
=======
        <member name="P:libeveapi.KillLog.Attacker.WeaponTypeId">
>>>>>>> .r330
            <summary>
            Returns a list of RefTypes that are used by certain API Calls
            </summary>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns></returns>
        </member>
        <member name="M:libeveapi.EveApi.GetMapJumps">
            <summary>
            Returns a list solar systems that have more than 0 jumps with the jump count
            </summary>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetMapJumps(System.Boolean)">
=======
        <member name="P:libeveapi.KillLog.Item.TypeId">
>>>>>>> .r330
            <summary>
            Returns a list solar systems that have more than 0 jumps with the jump count
            </summary>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetMapSovereignty">
=======
        <member name="P:libeveapi.KillLog.Item.Flag">
>>>>>>> .r330
            <summary>
            Returns a list solar systems that have sovereignty
            </summary>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetMapSovereignty(System.Boolean)">
=======
        <member name="P:libeveapi.KillLog.Item.QtyDropped">
>>>>>>> .r330
            <summary>
            Returns a list solar systems that have sovereignty
            </summary>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetMapKills">
=======
        <member name="P:libeveapi.KillLog.Item.QtyDestroyed">
>>>>>>> .r330
            <summary>
            Returns a list kills in solar systems with more than 0 kills
            </summary>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetMapKills(System.Boolean)">
=======
        <member name="P:libeveapi.KillLog.Item.Container">
>>>>>>> .r330
            <summary>
            Returns a list kills in solar systems with more than 0 kills
            </summary>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetMemberTracking(System.Int32,System.Int32,System.String)">
=======
        <member name="P:libeveapi.KillLog.Item.ContainedItems">
>>>>>>> .r330
            <summary>
            Returns information on every member in the corporation. Information retrieved
            varies on your roles without within the corporation. Not valid for NPC corps.
            </summary>
            <param name="userId">user Id of account for authentication</param>
            <param name="characterId">Character Id of a char with director/CEO access in the corp that owns the starbase</param>
            <param name="fullApiKey">Full access api key of account</param>
            <returns></returns>
        </member>
        <member name="M:libeveapi.EveApi.GetMemberTracking(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns information on every member in the corporation. Information retrieved
            varies on your roles without within the corporation. Not valid for NPC corps.
            </summary>
            <param name="userId">user Id of account for authentication</param>
            <param name="characterId">Character Id of a char with director/CEO access in the corp that owns the starbase</param>
            <param name="fullApiKey">Full access api key of account</param>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns></returns>
        </member>
        <member name="M:libeveapi.EveApi.GetCharacterSheet(System.Int32,System.Int32,System.String)">
            <summary>
            Returns a detailed description of a character
            </summary>
            <param name="userId">userId of account for authentication</param>
            <param name="characterId">CharacterId of character for authentication</param>
            <param name="apiKey">Limited access API key of account</param>
            <returns></returns>
        </member>
        <member name="M:libeveapi.EveApi.GetCharacterSheet(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns a detailed description of a character
            </summary>
            <param name="userId">userId of account for authentication</param>
            <param name="characterId">CharacterId of character for authentication</param>
            <param name="apiKey">Limited access API key of account</param>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetCorporationSheet(System.Int32,System.Int32,System.String)">
=======
        <member name="P:libeveapi.AllianceList.AllianceListItems">
>>>>>>> .r330
            <summary>
            Returns a detailed description of a corporation
            </summary>
            <param name="userId">userId of account for authentication</param>
            <param name="characterId">CharacterId of character for authentication</param>
            <param name="apiKey">Limited access API key of account</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetCorporationSheet(System.Int32,System.Int32,System.String,System.Boolean)">
=======
        <member name="T:libeveapi.AllianceList.AllianceListItem">
>>>>>>> .r330
            <summary>
<<<<<<< .mine
            Returns a detailed description of a corporation
=======
            Represents an alliance
            </summary>
        </member>
        <member name="P:libeveapi.AllianceList.AllianceListItem.Name">
            <summary>
            full name of the alliance
>>>>>>> .r330
            </summary>
            <param name="userId">userId of account for authentication</param>
            <param name="characterId">CharacterId of character for authentication</param>
            <param name="apiKey">Limited access API key of account</param>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetCorporationSheet(System.Int32,System.Int32,System.String,System.Int32)">
=======
        <member name="P:libeveapi.AllianceList.AllianceListItem.ShortName">
>>>>>>> .r330
            <summary>
            Returns a detailed description of a corporation
            </summary>
            <param name="userId">userId of account for authentication</param>
            <param name="characterId">CharacterId of character for authentication</param>
            <param name="apiKey">Limited access API key of account</param>
            <param name="corporationId">retrieve information on the corporation with this id</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetCorporationSheet(System.Int32,System.Int32,System.String,System.Int32,System.Boolean)">
=======
        <member name="P:libeveapi.AllianceList.AllianceListItem.AllianceId">
>>>>>>> .r330
            <summary>
            Returns a detailed description of a corporation
            </summary>
            <param name="userId">userId of account for authentication</param>
            <param name="characterId">CharacterId of character for authentication</param>
            <param name="apiKey">Limited access API key of account</param>
            <param name="corporationId">retrieve information on the corporation with this id</param>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetConquerableStationList">
=======
        <member name="P:libeveapi.AllianceList.AllianceListItem.ExecutorCorpId">
>>>>>>> .r330
            <summary>
            Gets a list of conquerable stations from the api
            </summary>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetConquerableStationList(System.Boolean)">
=======
        <member name="P:libeveapi.AllianceList.AllianceListItem.MemberCount">
>>>>>>> .r330
            <summary>
            Gets a list of conquerable stations from the api
            </summary>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetSkillTree">
=======
        <member name="P:libeveapi.AllianceList.AllianceListItem.StartDate">
>>>>>>> .r330
            <summary>
            Gets a data structure containing information on every skill in the game.
            </summary>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetSkillTree(System.Boolean)">
=======
        <member name="P:libeveapi.AllianceList.AllianceListItem.StartDateLocal">
>>>>>>> .r330
            <summary>
            Gets a data structure containing information on every skill in the game.
            </summary>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetAllianceList">
=======
        <member name="P:libeveapi.AllianceList.AllianceListItem.CorporationListItems">
>>>>>>> .r330
            <summary>
            Gets a list of all alliances and their member corporations
            </summary>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetAllianceList(System.Boolean)">
=======
        <member name="T:libeveapi.AllianceList.CorporationListItem">
>>>>>>> .r330
            <summary>
<<<<<<< .mine
            Gets a list of all alliances and their member corporations
=======
            Represents a member corporation
            </summary>
        </member>
        <member name="P:libeveapi.AllianceList.CorporationListItem.CorporationId">
            <summary>
            unique identifier for the corporation
>>>>>>> .r330
            </summary>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetSkillInTraining(System.Int32,System.Int32,System.String)">
=======
        <member name="P:libeveapi.AllianceList.CorporationListItem.StartDate">
>>>>>>> .r330
            <summary>
            Get the currently training Skill for a character
            </summary>
            <param name="userId">User Id of account for authentication</param>
            <param name="characterId">Character Id of the character to get skill info for</param>
            <param name="apiKey">limited access API key of Account</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.EveApi.GetSkillInTraining(System.Int32,System.Int32,System.String,System.Boolean)">
=======
        <member name="P:libeveapi.AllianceList.CorporationListItem.StartDateLocal">
>>>>>>> .r330
            <summary>
            Get the currently training Skill for a character
            </summary>
            <param name="userId">User Id of account for authentication</param>
            <param name="characterId">Character Id of the character to get skill info for</param>
            <param name="apiKey">limited access API key of Account</param>
            <param name="ignoreCacheUntil">Ignores the cacheUntil and will return the cache even if expired</param>
            <returns></returns>
        </member>
        <member name="M:libeveapi.EveApi.GetCharacterPortrait(System.Int32,libeveapi.PortraitSize)">
            <summary>
            Retrieve the portrait for a character
            </summary>
            <param name="characterId">Retrieve the portrait of the character with this id</param>
            <param name="portraitSize">Small (64) or Large (256)</param>
            <returns></returns>
        </member>
        <member name="T:libeveapi.ApiResponseErrorException">
            <summary>
            Raised when an error reponse is received from an eve api request
            </summary>
        </member>
        <member name="F:libeveapi.ApiResponseErrorException.Code">
            <summary>
            The error code
            </summary>
        </member>
        <member name="M:libeveapi.ApiResponseErrorException.#ctor(System.String,System.String)">
            <summary>
            Sets the current error code to the code recieved
            </summary>
            <param name="code"></param>
            <param name="message"></param>
        </member>
        <member name="T:libeveapi.PortraitSize">
            <summary>
            Character portrait size
            </summary>
        </member>
        <member name="F:libeveapi.PortraitSize.Small">
            <summary>
            A small portrait, 64x64 pixels
            </summary>
        </member>
        <member name="F:libeveapi.PortraitSize.Large">
            <summary>
            A large portrait, 256x256 pixels
            </summary>
        </member>
        <member name="M:libeveapi.TimeUtilities.ConvertCCPTimeStringToDateTimeUTC(System.String)">
            <summary>
            Converts a CCP API date/time string to a UTC DateTime
            </summary>
            <param name="timeUTC"></param>
            <returns></returns>
        </member>
        <member name="T:libeveapi.AccountBalance">
            <summary>
            Represents a character or corporation AccountBalance response from the eve api
            http://wiki.eve-dev.net/APIv2_Char_AccountBalance_XML
            http://wiki.eve-dev.net/APIv2_Corp_AccountBalance_XML
            </summary>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.AccountBalance.FromXmlDocument(System.Xml.XmlDocument)">
            <summary>
            Create an AccountBalance object by parsing an XmlDocument response from the eve api
            </summary>
            <param name="xmlDoc">An XML Document containing Account Balance Information</param>
            <returns><see cref="T:libeveapi.AccountBalance"/>Returns an AccountBlance Object</returns>
        </member>
=======
>>>>>>> .r330
        <member name="P:libeveapi.AccountBalance.AccountBalanceItems">
            <summary>
            The accounts associated with this character or corporation
            </summary>
        </member>
        <member name="T:libeveapi.AccountBalance.AccountBalanceItem">
            <summary>
            An account associated with a character or corporation
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.AccountBalance.AccountBalanceItem.AccountId">
=======
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItems">
            <summary>
            
            </summary>
        </member>
        <member name="T:libeveapi.WalletTransactions.WalletTransactionItem">
>>>>>>> .r330
            <summary>
            ID number of the account
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.AccountBalance.AccountBalanceItem.AccountKey">
=======
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.TransactionDateTime">
>>>>>>> .r330
            <summary>
            Account Identifier
            For character: always 1000
            For corporation: the corp wallet division
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.AccountBalance.AccountBalanceItem.Balance">
=======
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.TransactionDateTimeLocal">
>>>>>>> .r330
            <summary>
            Amount of isk in the account
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.AccountBalanceType">
=======
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.TransactionId">
>>>>>>> .r330
            <summary>
            The api allows retrieving the account balances for a character or a corporation
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.AccountBalanceType.Character">
=======
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.Quantity">
>>>>>>> .r330
            <summary>
            A character account
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.AccountBalanceType.Corporation">
=======
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.TypeName">
>>>>>>> .r330
            <summary>
            A corporation account
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.MapJumps">
=======
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.TypeId">
>>>>>>> .r330
            <summary>
            Represents the number of jumps per system from the eve api
            http://wiki.eve-dev.net/APIv2_Map_Jumps_XML
            </summary>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.MapJumps.FromXmlDocument(System.Xml.XmlDocument)">
=======
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.Price">
>>>>>>> .r330
            <summary>
            Create an MapJumps object by parsing an XmlDocument response from the eve api
            </summary>
            <param name="xmlDoc">An XML document containing jump information</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MapJumps.MapSystemJumps">
=======
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.ClientId">
>>>>>>> .r330
            <summary>
<<<<<<< .mine
=======
            The client's Id
            </summary>
        </member>
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.ClientName">
            <summary>
            The client's name
            </summary>
        </member>
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.CharacterId">
            <summary>
            The character who initiated the transaction's id 
            This is only present when viewing corp transactions, otherwise
            it is assumed to be the character accessing the data
            </summary>
        </member>
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.CharacterName">
            <summary>
            The character who initiated the transaction's name 
            This is only present when viewing corp transactions, otherwise
            it is assumed to be the character accessing the data
            </summary>
        </member>
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.StationId">
            <summary>
            The Id of the station where the transaction took place
            </summary>
        </member>
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.StationName">
            <summary>
            The name of the station where the transaction took place
            </summary>
        </member>
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.TransactionType">
            <summary>
            This is the type of transaction type, sell or buy
            </summary>
        </member>
        <member name="P:libeveapi.WalletTransactions.WalletTransactionItem.TransactionFor">
            <summary>
            This is who the transaction was for (personal or corporation)
            </summary>
        </member>
        <member name="T:libeveapi.WalletTransactionListType">
            <summary>
            If the transaction is a corporation or character transaction
            </summary>
        </member>
        <member name="F:libeveapi.WalletTransactionListType.Corporation">
            <summary>
            A corporation transaction
            </summary>
        </member>
        <member name="F:libeveapi.WalletTransactionListType.Character">
            <summary>
            A character transaction
            </summary>
        </member>
        <member name="T:libeveapi.StarbaseDetail">
            <summary>
            Shows the settings and fuel status of a starbase
            </summary>
        </member>
        <member name="M:libeveapi.StarbaseDetail.FromXmlDocument(System.Xml.XmlDocument)">
            <summary>
>>>>>>> .r330
            Create a StarbaseDetail by parsing an XmlDocument response from the eveapi
            </summary>
            <param name="xmlDoc"></param>
            <returns></returns>
        </member>
        <member name="P:libeveapi.StarbaseDetail.UsageFlags">
            <summary>
            
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.MapJumps.MapSystemItem">
=======
        <member name="P:libeveapi.StarbaseDetail.DeployFlags">
>>>>>>> .r330
            <summary>
            The information for a system with one jump or more
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MapJumps.MapSystemItem.SolarSystemId">
=======
        <member name="P:libeveapi.StarbaseDetail.AllowCorporationMembers">
>>>>>>> .r330
            <summary>
            The Id of the solarsystem
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MapJumps.MapSystemItem.ShipJumps">
=======
        <member name="P:libeveapi.StarbaseDetail.AllowAllianceMembers">
>>>>>>> .r330
            <summary>
            The number of jumps
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.ConquerableStationList">
=======
        <!-- Badly formed XML comment ignored for member "P:libeveapi.StarbaseDetail.ClaimSovereignty" -->
        <member name="P:libeveapi.StarbaseDetail.OnStandingDropEnabled">
>>>>>>> .r330
            <summary>
            Holds the full list of Conquerable stations and outposts
            </summary>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.ConquerableStationList.FromXmlDocument(System.Xml.XmlDocument)">
=======
        <member name="P:libeveapi.StarbaseDetail.OnStandingDropStanding">
>>>>>>> .r330
            <summary>
            Create an Conquerable Station list by parsing an XmlDocument response from the eveapi
            </summary>
<<<<<<< .mine
            <param name="xmlDoc"></param>
            <returns></returns>
        </member>
=======
        </member>
        <member name="P:libeveapi.StarbaseDetail.OnStatusDropEnabled">
            <summary>
            Shoot on status drop
            </summary>
        </member>
        <member name="P:libeveapi.StarbaseDetail.OnStatusDropStanding">
            <summary>
            What target security make them a valid target
            </summary>
        </member>
        <member name="P:libeveapi.StarbaseDetail.OnAgressionEnabled">
            <summary>
            Shoot on target agression
            </summary>
        </member>
        <member name="P:libeveapi.StarbaseDetail.OnCorporationWarEnabled">
            <summary>
            Shoot if at war with target
            </summary>
        </member>
        <member name="P:libeveapi.StarbaseDetail.FuelList">
            <summary>
            
            </summary>
        </member>
>>>>>>> .r330
        <member name="M:libeveapi.ConquerableStationList.ParseStationRow(System.Xml.XmlNode)">
            <summary>
            Create an ConquerableStationItem by parsing a single row
            </summary>
            <param name="stationRow"></param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.ConquerableStationList.ConquerableStations">
=======
        <member name="P:libeveapi.StarbaseDetail.FuelListItem.TypeId">
>>>>>>> .r330
            <summary>
<<<<<<< .mine
=======
            Type Id of the fuel
            </summary>
        </member>
        <member name="P:libeveapi.StarbaseDetail.FuelListItem.Quantity">
            <summary>
            Number of units of the fuel remaining
            </summary>
        </member>
        <member name="T:libeveapi.SkillTree">
            <summary>
>>>>>>> .r330
            
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.ConquerableStationList.ConquerableStation">
=======
        <member name="P:libeveapi.SkillTree.Skills">
>>>>>>> .r330
            <summary>
            Represents one conquerable station / outpost
            </summary>
        </member>
        <member name="P:libeveapi.ConquerableStationList.ConquerableStation.StationId">
            <summary>
            The unique station Id
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.ConquerableStationList.ConquerableStation.StationName">
=======
        <member name="P:libeveapi.SkillTree.Skill.TypeName">
>>>>>>> .r330
            <summary>
            The name of the station (corp gets to name it)
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.ConquerableStationList.ConquerableStation.StationTypeId">
=======
        <member name="P:libeveapi.SkillTree.Skill.GroupId">
>>>>>>> .r330
            <summary>
            The typeId of the station / outpost
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.ConquerableStationList.ConquerableStation.SolarSystemId">
=======
        <member name="P:libeveapi.SkillTree.Skill.TypeId">
>>>>>>> .r330
            <summary>
            The solarSystemId that the station / outpost is located in
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.ConquerableStationList.ConquerableStation.CorporationId">
=======
        <member name="P:libeveapi.SkillTree.Skill.Description">
>>>>>>> .r330
            <summary>
            The id of the corporation that owns teh station / outpost
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.ConquerableStationList.ConquerableStation.CorporationName">
=======
        <member name="P:libeveapi.SkillTree.Skill.Rank">
>>>>>>> .r330
            <summary>
            The name of the corporation that owns the station / outpost
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.StarbaseList">
=======
        <member name="P:libeveapi.SkillTree.Skill.RequiredSkills">
>>>>>>> .r330
            <summary>
            Represents a list of all the starbases owned by the specified corporation
            </summary>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.StarbaseList.FromXmlDocument(System.Xml.XmlDocument)">
=======
        <member name="P:libeveapi.SkillTree.Skill.PrimaryAttribute">
>>>>>>> .r330
            <summary>
            Create a StarbaseList by parsing an XmlDocument response from the eveapi
            </summary>
            <param name="xmlDoc"></param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.StarbaseList.StarbaseListItems">
=======
        <member name="P:libeveapi.SkillTree.Skill.SecondaryAttribute">
>>>>>>> .r330
            <summary>
            List of all the starbases owned by this corporation
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.StarbaseList.StarbaseListItem">
=======
        <member name="P:libeveapi.SkillTree.Skill.SkillBonuses">
>>>>>>> .r330
            <summary>
            Represents a single starbase in the starbase list
            </summary>
        </member>
        <member name="P:libeveapi.StarbaseList.StarbaseListItem.ItemId">
            <summary>
            Unique identifier for this starbase
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.StarbaseList.StarbaseListItem.TypeId">
=======
        <member name="P:libeveapi.SkillTree.RequiredSkill.TypeId">
>>>>>>> .r330
            <summary>
            Control tower type id
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.StarbaseList.StarbaseListItem.LocationId">
=======
        <member name="P:libeveapi.SkillTree.RequiredSkill.SkillLevel">
>>>>>>> .r330
            <summary>
            The id of the system where the starbase is located
            </summary>
        </member>
        <member name="P:libeveapi.StarbaseList.StarbaseListItem.MoonId">
            <summary>
            The id of the moon where the starbase is located
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.StarbaseList.StarbaseListItem.State">
=======
        <member name="P:libeveapi.SkillTree.SkillGroup.GroupName">
>>>>>>> .r330
            <summary>
            See <see cref="T:libeveapi.StarbaseList.StarbaseState"/> for full descriptions of each starbase state
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.StarbaseList.StarbaseListItem.StateTimestamp">
=======
        <member name="P:libeveapi.SkillTree.SkillGroup.GroupId">
>>>>>>> .r330
            <summary>
            See <see cref="T:libeveapi.StarbaseList.StarbaseState"/> for the potential meanings of StateTimestamp
            </summary>
        </member>
        <member name="P:libeveapi.StarbaseList.StarbaseListItem.OnlineTimestamp">
            <summary>
            See <see cref="T:libeveapi.StarbaseList.StarbaseState"/> for the potential meanings of OnlineTimestamp
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.StarbaseList.StarbaseListItem.StateTimestampLocal">
=======
        <member name="P:libeveapi.SkillTree.SkillBonus.BonusType">
>>>>>>> .r330
            <summary>
            StateTimestamp in local time
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.StarbaseList.StarbaseListItem.OnlineTimestampLocal">
=======
        <member name="P:libeveapi.SkillTree.SkillBonus.BonusValue">
>>>>>>> .r330
            <summary>
            OnlineTimestamp in local time
            </summary>
        </member>
        <member name="T:libeveapi.StarbaseList.StarbaseState">
            <summary>
            This represents the current state of the starbase, of which there are
            four different valid states.
            </summary>
        </member>
        <member name="F:libeveapi.StarbaseList.StarbaseState.AnchoredOrOffline">
            <summary>
            Starbase is anchored or offline
            if offline then it went offline at StateTimestamp
            </summary>
        </member>
        <member name="F:libeveapi.StarbaseList.StarbaseState.Onlining">
            <summary>
            Starbase is in the process of coming online
            Will be online at time OnlineTimestamp
            </summary>
        </member>
        <member name="F:libeveapi.StarbaseList.StarbaseState.Reinforced">
            <summary>
            Starbase in in reinforced mode
            Until time StateTimestamp
            </summary>
        </member>
        <member name="F:libeveapi.StarbaseList.StarbaseState.Online">
            <summary>
            Starbase is online
            Continuously since time OnlineTimestamp
            </summary>
        </member>
        <member name="T:libeveapi.Network">
            <summary>
<<<<<<< .mine
            
            </summary>
        </member>
=======
            The Charisma attribute
            </summary>
        </member>
        <member name="F:libeveapi.SkillTree.AttributeType.Unknown">
            <summary>
            What is this attribute?
            </summary>
        </member>
        <member name="T:libeveapi.JournalEntries">
            <summary>
            Represents a character or corporation journal entry from the eve api
            http://wiki.eve-dev.net/APIv2_Char_JournalEntries_XML
            </summary>
        </member>
>>>>>>> .r330
        <member name="M:libeveapi.Network.GetXml(System.String)">
            <summary>
            This function takes in a url, and will download the data from that
            URL and create an xml document from it
            </summary>
            <param name="url">The url of the XML file to retrieve</param>
            <returns></returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.Network.GetImage(System.String)">
=======
        <member name="P:libeveapi.JournalEntries.JournalEntryItems">
            <summary>
            
            </summary>
        </member>
        <member name="T:libeveapi.JournalEntries.JournalEntryItem">
>>>>>>> .r330
            <summary>
            This function takes in a url of an image and then returns the image
            </summary>
            <param name="url">The url of the image file to retrieve</param>
            <returns>An image object containing the image from the url</returns>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.Network.openUrl(System.String)">
=======
        <member name="P:libeveapi.JournalEntries.JournalEntryItem.Date">
>>>>>>> .r330
            <summary>
            This function takes in a url and will return a stream of data from that url
            Also takes into account the user-agent settings and any proxy settings
            </summary>
            <param name="url">The url of the image file to retrieve</param>
            <returns>A stream of data</returns>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.Network.eveNetworkClientSettings">
=======
        <member name="P:libeveapi.JournalEntries.JournalEntryItem.DateLocal">
>>>>>>> .r330
            <summary>
            All advanced network settings go here
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Network.eveNetworkClientSettings.proxy">
=======
        <member name="P:libeveapi.JournalEntries.JournalEntryItem.RefId">
>>>>>>> .r330
            <summary>
            The default proxy is null, meaning no proxy in use
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Network.eveNetworkClientSettings.userAgent">
=======
        <member name="P:libeveapi.JournalEntries.JournalEntryItem.RefTypeId">
>>>>>>> .r330
            <summary>
            The base userAgent string to be used by the program
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.MapSovereignty">
=======
        <member name="P:libeveapi.JournalEntries.JournalEntryItem.OwnerName1">
>>>>>>> .r330
            <summary>
            Returns a list of solarsystems and what faction or alliance controls them.
            http://wiki.eve-dev.net/APIv2_Map_Kills_XML
            </summary>
        </member>
<<<<<<< .mine
        <member name="M:libeveapi.MapSovereignty.FromXmlDocument(System.Xml.XmlDocument)">
=======
        <member name="P:libeveapi.JournalEntries.JournalEntryItem.OwnerId1">
>>>>>>> .r330
            <summary>
            Create an Mapkills object by parsing an XmlDocument response from the eve api
            </summary>
            <param name="xmlDoc">XML Document containing map sovereignty information</param>
            <returns><see cref="T:libeveapi.MapSovereignty"/>A map sovereignty object</returns>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MapSovereignty.MapSystemSovereigntyItems">
=======
        <member name="P:libeveapi.JournalEntries.JournalEntryItem.OwnerName2">
>>>>>>> .r330
            <summary>
            
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.MapSovereignty.MapSovereigntyItem">
=======
        <member name="P:libeveapi.JournalEntries.JournalEntryItem.OwnerId2">
>>>>>>> .r330
            <summary>
            The information for a system with one jump or more
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MapSovereignty.MapSovereigntyItem.SolarSystemId">
=======
        <member name="P:libeveapi.JournalEntries.JournalEntryItem.ArgName1">
>>>>>>> .r330
            <summary>
            The unique identification number of a solar system
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MapSovereignty.MapSovereigntyItem.AllianceId">
=======
        <member name="P:libeveapi.JournalEntries.JournalEntryItem.ArgId1">
>>>>>>> .r330
            <summary>
            The Id of the alliance that has sovereignty of this solar system, or 0 if nobody has sovereignty.
            </summary>
        </member>
<<<<<<< .mine
        <!-- Badly formed XML comment ignored for member "P:libeveapi.MapSovereignty.MapSovereigntyItem.ConstellationSovereignty" -->
        <member name="P:libeveapi.MapSovereignty.MapSovereigntyItem.SovereigntyLevel">
=======
        <member name="P:libeveapi.JournalEntries.JournalEntryItem.Amount">
>>>>>>> .r330
            <summary>
            The level of sovernty
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MapSovereignty.MapSovereigntyItem.FactionId">
=======
        <member name="P:libeveapi.JournalEntries.JournalEntryItem.Balance">
>>>>>>> .r330
            <summary>
            The NPC faction that controls this system
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.MapSovereignty.MapSovereigntyItem.SolarSystemName">
=======
        <member name="P:libeveapi.JournalEntries.JournalEntryItem.Reason">
>>>>>>> .r330
            <summary>
            Name of the solar system
            </summary>
        </member>
        <member name="T:libeveapi.SerializableDictionary`2">
            <summary>
            Shamelessly "borrowed" from the EveMon project.
            http://evemon.battleclinic.com/
            </summary>
        </member>
        <member name="M:libeveapi.SerializableDictionary`2.GetSchema">
            <summary>
            
            </summary>
        </member>
        <member name="M:libeveapi.SerializableDictionary`2.ReadXml(System.Xml.XmlReader)">
            <summary>
            
            </summary>
        </member>
        <member name="M:libeveapi.SerializableDictionary`2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.CharacterIdName">
            <summary>
            Represents a character name and  CharacterId response from the eve api
            http://wiki.eve-dev.net/APIv2_Eve_CharacterID_XML
            </summary>
        </member>
=======
>>>>>>> .r330
        <member name="M:libeveapi.CharacterIdName.FromXmlDocument(System.Xml.XmlDocument)">
            <summary>
            Returns the characterId and character name that are associated with eachother
            </summary>
            <param name="xmlDoc">An XML Document containing characterId and character name information</param>
            <returns><see cref="T:libeveapi.CharacterIdName"/></returns>
        </member>
        <member name="P:libeveapi.CharacterIdName.CharacterIdItems">
            <summary>
            The character name and character id that are associated with eachother
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.CharacterIdName.CharacterIdNameItem">
=======
        <member name="P:libeveapi.ConquerableStationList.ConquerableStations">
            <summary>
            
            </summary>
        </member>
        <member name="T:libeveapi.ConquerableStationList.ConquerableStation">
>>>>>>> .r330
            <summary>
            An charIdItem associated with a character or corporation
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.CharacterIdName.CharacterIdNameItem.Name">
=======
        <member name="P:libeveapi.ConquerableStationList.ConquerableStation.StationId">
>>>>>>> .r330
            <summary>
            The character's name
            </summary>
        </member>
<<<<<<< .mine
        <member name="P:libeveapi.CharacterIdName.CharacterIdNameItem.CharacterId">
=======
        <member name="P:libeveapi.ConquerableStationList.ConquerableStation.StationName">
>>>>>>> .r330
            <summary>
            The characterId for the character name
            </summary>
        </member>
<<<<<<< .mine
        <member name="T:libeveapi.Constants">
=======
        <member name="P:libeveapi.ConquerableStationList.ConquerableStation.StationTypeId">
>>>>>>> .r330
            <summary>
            These are the different contants needed throughout the program
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.ApiPrefix">
=======
        <member name="P:libeveapi.ConquerableStationList.ConquerableStation.SolarSystemId">
>>>>>>> .r330
            <summary>
            This is the main domain name that is the prefix for all requests.
            To change what server is being used for testing, this URL would be
            changed to a test server.
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.CharacterAccountBalance">
=======
        <member name="P:libeveapi.ConquerableStationList.ConquerableStation.CorporationId">
>>>>>>> .r330
            <summary>
            The location of the character account balance xml file
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.CorpAccountBalance">
=======
        <member name="P:libeveapi.ConquerableStationList.ConquerableStation.CorporationName">
>>>>>>> .r330
            <summary>
            The location of the corporation account balance xml file
            </summary>
        </member>
        <member name="F:libeveapi.Constants.CharacterList">
            <summary>
            The location of the character list xml file
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.StarbaseDetails">
=======
        <member name="M:libeveapi.CharacterSheet.FromXmlDocument(System.Xml.XmlDocument)">
>>>>>>> .r330
            <summary>
<<<<<<< .mine
            The location of the corporation's starbase details xml file
=======
            Create an CharacterSheet by parsing an XmlDocument response from the eveapi
            </summary>
            <param name="xmlDoc">An XML Document containing the CharacterSheet</param>
            <returns><see cref="T:libeveapi.CharacterSheet"/></returns>
        </member>
        <member name="M:libeveapi.CharacterSheet.parseAugmentator(System.String,System.Xml.XmlDocument,libeveapi.CharacterSheet.AttributeEnhancer)">
            <summary>
            Parses out each implant that the character has in
            </summary>
            <param name="xpath">The xpath location of the implant in the xml</param>
            <param name="xmlDoc">The xml document</param>
            <param name="ae">The correct attribute enhancer to modify</param>
            <returns></returns>
        </member>
        <member name="P:libeveapi.CharacterSheet.CharacterId">
            <summary>
            The eve assigned characterId
>>>>>>> .r330
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.StarbaseList">
=======
        <member name="P:libeveapi.CharacterSheet.Name">
>>>>>>> .r330
            <summary>
            The location of the corporation's starbase list xml file
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.ErrorList">
=======
        <member name="P:libeveapi.CharacterSheet.Race">
>>>>>>> .r330
            <summary>
            The location of the error list
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.CharAssetList">
=======
        <member name="P:libeveapi.CharacterSheet.BloodLine">
>>>>>>> .r330
            <summary>
            The location of the character's asset list xml file
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.CorpAssetList">
=======
        <member name="P:libeveapi.CharacterSheet.Gender">
>>>>>>> .r330
            <summary>
            The location of the corporation asset list xml file
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.CharIndustryJobs">
=======
        <member name="P:libeveapi.CharacterSheet.CorporationName">
>>>>>>> .r330
            <summary>
            The location of the character's industrial jobs xml file
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.CorpIndustryJobs">
=======
        <member name="P:libeveapi.CharacterSheet.CorporationId">
>>>>>>> .r330
            <summary>
            The location of the corporation's industrial jobs xml file
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.CharJournalEntries">
=======
        <member name="P:libeveapi.CharacterSheet.Balance">
>>>>>>> .r330
            <summary>
            The location of the character's journal entries xml file
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.CorpJournalEntries">
=======
        <member name="P:libeveapi.CharacterSheet.Intelligence">
>>>>>>> .r330
            <summary>
            The location of the corporation's journal entries xml file
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.CharWalletTransactions">
=======
        <member name="P:libeveapi.CharacterSheet.Memory">
>>>>>>> .r330
            <summary>
            The location of the character's wallet transaction xml file
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.CorpWalletTransactions">
=======
        <member name="P:libeveapi.CharacterSheet.Charisma">
>>>>>>> .r330
            <summary>
            The location of the corporation's wallet transactions xml file
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.CharMarketOrders">
=======
        <member name="P:libeveapi.CharacterSheet.Perception">
>>>>>>> .r330
            <summary>
            The location of the character's market order xml file
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.CorpMarketOrders">
=======
        <member name="P:libeveapi.CharacterSheet.Willpower">
>>>>>>> .r330
            <summary>
            The location of the corporation's market order xml file
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.RefTypesList">
=======
        <member name="P:libeveapi.CharacterSheet.MemoryBonus">
>>>>>>> .r330
            <summary>
            The location of the reference type list xml file
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.MemberTracking">
=======
        <member name="P:libeveapi.CharacterSheet.WillpowerBonus">
>>>>>>> .r330
            <summary>
            The location of the member tracking xml file
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.CharacterIdName">
=======
        <member name="P:libeveapi.CharacterSheet.PerceptionBonus">
>>>>>>> .r330
            <summary>
            The location of the characterid and name conversion xml file
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.CharacterSheet">
=======
        <member name="P:libeveapi.CharacterSheet.IntelligenceBonus">
>>>>>>> .r330
            <summary>
            The location of the character sheet xml file
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.AllianceList">
=======
        <member name="P:libeveapi.CharacterSheet.CharismaBonus">
>>>>>>> .r330
            <summary>
            The location of the alliance list xml file
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.MapJumps">
=======
        <member name="P:libeveapi.CharacterSheet.SkillItemList">
>>>>>>> .r330
            <summary>
            The location of the map jump statistics xml file
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.MapKills">
            <summary>
            The location of the map kills statistics xml file
            </summary>
        </member>
        <member name="F:libeveapi.Constants.MapSoveignty">
            <summary>
            The location of the map sovernty statistics xml file
            </summary>
        </member>
=======
>>>>>>> .r330
        <member name="F:libeveapi.Constants.ConquerableStationOutpost">
            <summary>
            The location of the conquerable stations and outpost statistics xml file
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.CorporationSheet">
=======
        <member name="P:libeveapi.CharacterSheet.SkillItem.TypeId">
>>>>>>> .r330
            <summary>
            The location of the coporation sheet xml file
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.CharKillLog">
=======
        <member name="P:libeveapi.CharacterSheet.SkillItem.Skillpoints">
>>>>>>> .r330
            <summary>
            The location of the characters killlog xml file
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.CorpKillLog">
=======
        <member name="P:libeveapi.CharacterSheet.SkillItem.Level">
>>>>>>> .r330
            <summary>
            The location of the corporation killlog xml file
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.SkillInTraining">
=======
        <member name="P:libeveapi.CharacterSheet.SkillItem.Unpublished">
>>>>>>> .r330
            <summary>
            The location of the characters current skill in training xml file
            </summary>
        </member>
        <member name="F:libeveapi.Constants.SkillTree">
            <summary>
            The location of the current eve skill tree xml file
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.ImageFullURL">
=======
        <member name="P:libeveapi.CharacterSheet.AttributeEnhancer.Name">
>>>>>>> .r330
            <summary>
            The FULL PATH to the image generator
            </summary>
        </member>
<<<<<<< .mine
        <member name="F:libeveapi.Constants.ExampleError">
=======
        <member name="P:libeveapi.CharacterSheet.AttributeEnhancer.Value">
>>>>>>> .r330
            <summary>
            Not part of the eve-api - used for unit tests
            </summary>
        </member>
    </members>
</doc>
